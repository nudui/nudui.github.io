<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>受命于天</title>
  <subtitle>既寿永昌- java、golang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nudui.github.io/"/>
  <updated>2016-11-17T17:03:16.000Z</updated>
  <id>http://nudui.github.io/</id>
  
  <author>
    <name>受命于天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>golang笔记-4-函数</title>
    <link href="http://nudui.github.io/2016/11/17/golang%E7%AC%94%E8%AE%B0-4-%E5%87%BD%E6%95%B0/"/>
    <id>http://nudui.github.io/2016/11/17/golang笔记-4-函数/</id>
    <published>2016-11-17T15:14:54.000Z</published>
    <updated>2016-11-17T17:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>结构化最小模块单元，将复杂的算法过程分解为若干个较小任务，这些认为可在多处复用。<br><strong>函数是一等公民</strong></p>
<ul>
<li>无须前置声明。（未解其意，何谓“前置声明”）</li>
<li>不支持命名嵌套定义。（未解其意，何谓“命名嵌套定义”）</li>
<li>不支持同名函数重载。</li>
<li>不支持默认参数。（哪些语言的函数有默认参数，未解其意）</li>
<li>支持不定长变参。</li>
<li>支持<strong>多返回值</strong>。</li>
<li>支持命名返回值。</li>
<li>支持<strong>匿名函数</strong>与<strong>闭包</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func hello()&#123;</div><div class="line">    fmt.Println(&quot;hello world&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func exec(f func())&#123;    //函数作为参数</div><div class="line">    f()</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    h := hello  </div><div class="line">    exec(h)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数只能判断是否为nil，不能判断其他</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func a ()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func b()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    fmt.Println(a == nil)     // 输出 false  </div><div class="line">    fmt.Pringln(a == b)       //报错，无效操作</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>无论是指针、引用类型还是其他类型参数，都是<strong>值传递</strong>。区别无非是<strong>拷贝</strong>目标对象还是拷贝指针。在函数内对参数进行操作，都不会影响原值。</li>
<li>在函数调用前，会为形参和返回值分配内存空间，并将实参拷贝到形参的内存上。</li>
</ul>
<h4 id="变参"><a href="#变参" class="headerlink" title="变参"></a>变参</h4><p>变参实际上是一个切片。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;结构化最小模块单元，将复杂的算法过程分解为若干个较小任务，这些认为可在多处复用。&lt;br&gt;&lt;strong&gt;函数是一等公民&lt;/strong&gt;&lt;/
    
    </summary>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-3-表达式</title>
    <link href="http://nudui.github.io/2016/11/17/golang%E7%AC%94%E8%AE%B0-3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://nudui.github.io/2016/11/17/golang笔记-3-表达式/</id>
    <published>2016-11-17T11:06:22.000Z</published>
    <updated>2016-11-17T15:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h5 id="25个关键字"><a href="#25个关键字" class="headerlink" title="25个关键字"></a>25个关键字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">break continue, if else , go chan , var const type </div><div class="line"></div><div class="line">for range , go goto defer , switch case default fallthrough</div><div class="line"></div><div class="line">package import , func struct return map select</div></pre></td></tr></table></figure>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if .. else .."></a>if .. else ..</h4><ul>
<li><p>表达式的值必须是bool类型。</p>
</li>
<li><p>表达式可以执行初始化语句。如下 :</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var x int </div><div class="line"></div><div class="line">func xinit()&#123;</div><div class="line">    x = 1000</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    if xinit(); x &gt; 100&#123;</div><div class="line">        ... //  可以执行</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h4><p>无须break，自动在相应的case处执行完毕中断</p>
<ul>
<li>一般形式 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    a , b , c := 0 , 1 , 2</div><div class="line">    </div><div class="line">    switch x &#123;</div><div class="line">        case a , b : </div><div class="line">            fmt.Println(&quot;0 或者 1&quot;)</div><div class="line">        case 4 : </div><div class="line">            fmt.Println(&quot;值为4&quot;)</div><div class="line">        default : </div><div class="line">            fmt.Println(&quot;default value&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>表达式形式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    a , b , c := 0 , 1 , 2</div><div class="line">    </div><div class="line">    switch x := 100 ; x &#123;</div><div class="line">        case a , b : </div><div class="line">            fmt.Println(&quot;0 或者 1&quot;)</div><div class="line">        case 4 : </div><div class="line">            fmt.Println(&quot;值为4&quot;)</div><div class="line">        default : </div><div class="line">            fmt.Println(&quot;default value&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>fallthrough   必须放在case块的末尾</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    </div><div class="line">    switch x := 100 ; x &#123;</div><div class="line">        case a , b : </div><div class="line">            fmt.Println(&quot;0 或者 1&quot;)</div><div class="line">        case 100 : </div><div class="line">            x += 10</div><div class="line">            fmt.Println(x)</div><div class="line">            </div><div class="line">            fallthrough     //无条件执行下一个case，default除外。</div><div class="line">        case 101 :</div><div class="line">            x += 10</div><div class="line">            fmt.Println(x)</div><div class="line">                            //如果还有fallthrough，则继续执行下一个非default的case</div><div class="line">        default : </div><div class="line">            fmt.Println(&quot;default value&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>不能出现重复的case。</li>
<li>有时switch可代替if语句。</li>
</ol>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><ul>
<li>golang中只有for这一种循环。</li>
<li>for循环完成了java中的while循环、for..each循环。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//普通for循环</div><div class="line">for i := 0 ; i &lt; 100 ; i ++ &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//相当于while循环</div><div class="line">for x &lt; 10 &#123;</div><div class="line">   ... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//相当于while true</div><div class="line">for &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>for range</strong> 用于数据迭代，支持字符串、数组、数组指针、切片、字典、通道类型、键值数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    data := [10]int&#123;1, 2, 3, 4 &#125;</div><div class="line">    </div><div class="line">    for index , v := range data&#123;</div><div class="line">        fmt.Print(&quot;index is &quot; + index)</div><div class="line">        fmt.Println(&quot;value is &quot; + v)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h3&gt;&lt;h5 id=&quot;25个关键字&quot;&gt;&lt;a href=&quot;#25个关键字&quot; class=&quot;headerlink&quot; title=&quot;25个关键字&quot;&gt;&lt;
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>大神 on Git</title>
    <link href="http://nudui.github.io/2016/11/17/%E5%A4%A7%E7%A5%9E-on-Git/"/>
    <id>http://nudui.github.io/2016/11/17/大神-on-Git/</id>
    <published>2016-11-17T06:02:11.000Z</published>
    <updated>2016-11-17T06:39:51.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="赵烨"><a href="#赵烨" class="headerlink" title="赵烨"></a>赵烨</h3><ul>
<li>java</li>
<li>《轻松学算法》。</li>
<li><a href="https://github.com/irfen" target="_blank" rel="external">https://github.com/irfen</a></li>
<li><a href="http://irfen.me" target="_blank" rel="external">http://irfen.me</a></li>
</ul>
<h3 id="无闻"><a href="#无闻" class="headerlink" title="无闻"></a>无闻</h3><ul>
<li>golang</li>
<li>GIT：<a href="https://github.com/Unknwon" target="_blank" rel="external">https://github.com/Unknwon</a></li>
</ul>
<h3 id="谢孟军"><a href="#谢孟军" class="headerlink" title="谢孟军"></a>谢孟军</h3><ul>
<li>《Go Web编程》、beego的作者</li>
<li><a href="https://github.com/astaxie" target="_blank" rel="external">https://github.com/astaxie</a></li>
<li><a href="http://edu.51cto.com/lecturer/index/user_id-6177767.html" target="_blank" rel="external">http://edu.51cto.com/lecturer/index/user_id-6177767.html</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;赵烨&quot;&gt;&lt;a href=&quot;#赵烨&quot; class=&quot;headerlink&quot; title=&quot;赵烨&quot;&gt;&lt;/a&gt;赵烨&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;li&gt;《轻松学算法》。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/irfe
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Books on Git</title>
    <link href="http://nudui.github.io/2016/11/17/Books-on-Git/"/>
    <id>http://nudui.github.io/2016/11/17/Books-on-Git/</id>
    <published>2016-11-17T05:41:11.000Z</published>
    <updated>2016-11-17T06:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Go入门指南"><a href="#Go入门指南" class="headerlink" title="Go入门指南"></a>Go入门指南</h3><ul>
<li><a href="https://github.com/nudui/the-way-to-go_ZH_CN" target="_blank" rel="external">https://github.com/nudui/the-way-to-go_ZH_CN</a></li>
</ul>
<h3 id="Go-Web编程"><a href="#Go-Web编程" class="headerlink" title="Go Web编程"></a>Go Web编程</h3><ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/tree/master/zh" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/tree/master/zh</a></li>
</ul>
<h3 id="雨痕大神"><a href="#雨痕大神" class="headerlink" title="雨痕大神"></a>雨痕大神</h3><ul>
<li><a href="https://github.com/qyuhen/book" target="_blank" rel="external">https://github.com/qyuhen/book</a></li>
</ul>
<h3 id="国外资料整理"><a href="#国外资料整理" class="headerlink" title="国外资料整理"></a>国外资料整理</h3><ul>
<li><a href="https://github.com/dariubs/GoBooks#web-development" target="_blank" rel="external">https://github.com/dariubs/GoBooks#web-development</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Go入门指南&quot;&gt;&lt;a href=&quot;#Go入门指南&quot; class=&quot;headerlink&quot; title=&quot;Go入门指南&quot;&gt;&lt;/a&gt;Go入门指南&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nudui/the-way-to-go_
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>golang笔记-2-指针</title>
    <link href="http://nudui.github.io/2016/11/17/golang%E7%AC%94%E8%AE%B0-2-%E6%8C%87%E9%92%88/"/>
    <id>http://nudui.github.io/2016/11/17/golang笔记-2-指针/</id>
    <published>2016-11-16T18:42:55.000Z</published>
    <updated>2016-11-17T06:59:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指针与内存"><a href="#指针与内存" class="headerlink" title="指针与内存"></a>指针与内存</h3><p>不能将指针与内存地址混为一谈。</p>
<ul>
<li>内存地址：每个内存字节单元的唯一编号。</li>
<li>指针：专门用来保存地址的整形（整形？因为一切皆可用数字表示吗）变量。</li>
</ul>
<h6 id="如图："><a href="#如图：" class="headerlink" title="如图："></a>如图：</h6><table>
<thead>
<tr>
<th>表达式</th>
<th>p := &amp;x</th>
<th>x := 100</th>
</tr>
</thead>
<tbody>
<tr>
<td>memory</td>
<td>0x1200</td>
<td>100</td>
</tr>
<tr>
<td>address</td>
<td>0x800</td>
<td>0x1200</td>
</tr>
</tbody>
</table>
<h6 id="amp-与-："><a href="#amp-与-：" class="headerlink" title="&amp;与*："></a>&amp;与*：</h6><ul>
<li>取址运算符：&amp; ， 用于获取对象地址。</li>
<li>指针运算符：* ， 用于间接引用目标对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    x := 10</div><div class="line">    p := &amp;x</div><div class="line">    fmt.Println(p)  //  0xc42000a298</div><div class="line">    fmt.Println(*p) //  10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><ul>
<li>支持相等运算。</li>
<li>不支持加减运算、类型转换。</li>
<li>如果两个指针指向同一个地址，则二指针相等</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;指针与内存&quot;&gt;&lt;a href=&quot;#指针与内存&quot; class=&quot;headerlink&quot; title=&quot;指针与内存&quot;&gt;&lt;/a&gt;指针与内存&lt;/h3&gt;&lt;p&gt;不能将指针与内存地址混为一谈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存地址：每个内存字节单元的唯一编号。&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang 存疑" scheme="http://nudui.github.io/tags/golang-%E5%AD%98%E7%96%91/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-1-类型</title>
    <link href="http://nudui.github.io/2016/11/16/golang%E7%AC%94%E8%AE%B0-1-%E7%B1%BB%E5%9E%8B/"/>
    <id>http://nudui.github.io/2016/11/16/golang笔记-1-类型/</id>
    <published>2016-11-16T07:06:29.000Z</published>
    <updated>2016-11-17T11:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>Go语言强制了编码风格。</p>
<ul>
<li>任何需要<strong>对外暴露</strong>的名字必须以<strong>大写字母</strong>开头，不需要对外暴露的则应该以<strong>小写 字母</strong>开头。</li>
<li>Go语言明确宣告了拥护骆驼命名法而排斥下划线法。</li>
<li>“{}”，左括号禁止单开一行。<br>gotool中包含了一个代码格式化的功能。命令：go fmt hello.go，自动格式化。</li>
</ul>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul>
<li>略过</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>int8</td>
<td style="text-align:center">-128~127</td>
</tr>
<tr>
<td>int16</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td>int32</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td>int64</td>
<td style="text-align:center">-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td>uint…</td>
<td style="text-align:center">非负数，与上述对应 uint8:0~255</td>
</tr>
<tr>
<td>float32</td>
<td style="text-align:center">+- 1e-45 -&gt; +- 3.4 * 1e38</td>
</tr>
<tr>
<td>float64</td>
<td style="text-align:center">+- 5 <em> 1e-324 -&gt; 107 </em> 1e308</td>
</tr>
</tbody>
</table>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>特指 slice、map、channel</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>局部变量不允许只声明不使用!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//正确的声明</div><div class="line">var x int</div><div class="line">var x int = 3</div><div class="line">var x = 3</div><div class="line">var&#123;</div><div class="line">  x = 3</div><div class="line">  y = 4</div><div class="line">&#125;</div><div class="line">x := 3  //仅限于在函数中。</div><div class="line">x , y := 3 , 4</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func x() &#123;</div><div class="line">  var x = 3</div><div class="line">  x := 3    //错误，:=用于声明 + 赋值 ，x已经声明过了，不能再次声明 ， 只能赋值。</div><div class="line">  x , y := 1 , 4    //正确 ， y为新变量，此时:=对于x降级为赋值。必须有至少一个新的变量方可。</div><div class="line">&#125;</div><div class="line">//退化赋值的前提条件：至少有一个新的变量被定义，且必须是同一作用域。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var x = 3</div><div class="line">func x()&#123;</div><div class="line">  x := 4    //正确，此时的x与函数外的x作用域不同，相当于一个新的变量。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多变量"><a href="#多变量" class="headerlink" title="多变量"></a>多变量</h3><p>在进行多变量赋值时，先计算右侧的所有值，然后完成赋值操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">  a , b := 1 , 2</div><div class="line">  a , b = a + 1 : b + 1</div><div class="line">  fmt.Println(a , b) //结果：2 ，3</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func exchange(a , b int) (int,int)&#123;</div><div class="line">  a , b = b , a</div><div class="line">  return a , b</div><div class="line">&#125;</div><div class="line">func main()&#123;</div><div class="line">  //只想使用b</div><div class="line">  _ , b = exchange(1 , 2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>运行时恒定不变的，编译期间能确定值！可在函数内定义，允许只定义不使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">显式类型定义： const b string = &quot;abc&quot;</div><div class="line">隐式类型定义： const b = &quot;abc&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">正确的做法：const c1 = 2/3</div><div class="line">错误的做法：const c2 = getNumber() // 引发构建错误: getNumber() used as value</div></pre></td></tr></table></figure>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>严格来说这并非go语言的一个类型，字符只是证书的特殊用例。byte 类型是 uint8 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题。</p>
<p>例如：<code>var ch byte = &#39;A&#39;</code>字符使用单引号括起来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">判断是否为字母：unicode.IsLetter(ch)</div><div class="line">判断是否为数字：unicode.IsDigit(ch)</div><div class="line">判断是否为空白符号：unicode.IsSpace(ch)</div><div class="line">这些函数返回一个布尔值。</div></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是UTF-8的一个序列（当字符为ASCII码时占一个字节，其他字符需要2-4个字节）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;Go语言强制了编码风格。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何需要&lt;strong&gt;对外暴露&lt;/strong&gt;的名字必须以&lt;strong&gt;大写字母&lt;
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>tomcat加载两次spring</title>
    <link href="http://nudui.github.io/2016/07/16/tomcat%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1spring/"/>
    <id>http://nudui.github.io/2016/07/16/tomcat加载两次spring/</id>
    <published>2016-07-16T07:57:16.000Z</published>
    <updated>2016-11-17T04:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1，为了达到通过ip：端口进行访问-，做了如下配置："><a href="#1，为了达到通过ip：端口进行访问-，做了如下配置：" class="headerlink" title="1，为了达到通过ip：端口进行访问 ，做了如下配置："></a>1，为了达到通过ip：端口进行访问 ，做了如下配置：</h3><p> <img src="http://img.blog.csdn.net/20160823131643542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="2，然而，host标签加载一次webapps里面的项目-，-context标签加载一次docbase的项目，于是造成了两次加载。"><a href="#2，然而，host标签加载一次webapps里面的项目-，-context标签加载一次docbase的项目，于是造成了两次加载。" class="headerlink" title="2，然而，host标签加载一次webapps里面的项目 ， context标签加载一次docbase的项目，于是造成了两次加载。"></a>2，然而，host标签加载一次webapps里面的项目 ， context标签加载一次docbase的项目，于是造成了两次加载。</h3><h3 id="3，解决办法：在host标签加一个-deployIgnore-”-项目名-“-，-这样，host就不会加载。"><a href="#3，解决办法：在host标签加一个-deployIgnore-”-项目名-“-，-这样，host就不会加载。" class="headerlink" title="3，解决办法：在host标签加一个 deployIgnore=”.项目名.“ ， 这样，host就不会加载。"></a>3，解决办法：在host标签加一个 deployIgnore=”.<em>项目名.</em>“ ， 这样，host就不会加载。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1，为了达到通过ip：端口进行访问-，做了如下配置：&quot;&gt;&lt;a href=&quot;#1，为了达到通过ip：端口进行访问-，做了如下配置：&quot; class=&quot;headerlink&quot; title=&quot;1，为了达到通过ip：端口进行访问 ，做了如下配置：&quot;&gt;&lt;/a&gt;1，为了达到通过
    
    </summary>
    
      <category term="疑难杂症" scheme="http://nudui.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="tomcat" scheme="http://nudui.github.io/tags/tomcat/"/>
    
      <category term="spring" scheme="http://nudui.github.io/tags/spring/"/>
    
      <category term="疑难杂症" scheme="http://nudui.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>让mysql支持表情</title>
    <link href="http://nudui.github.io/2016/06/16/%E8%AE%A9mysql%E6%94%AF%E6%8C%81%E8%A1%A8%E6%83%85/"/>
    <id>http://nudui.github.io/2016/06/16/让mysql支持表情/</id>
    <published>2016-06-16T08:00:57.000Z</published>
    <updated>2016-11-17T04:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改-etc-my-cnf"><a href="#修改-etc-my-cnf" class="headerlink" title="修改 /etc/my.cnf"></a>修改 /etc/my.cnf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[client] </div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysql] </div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld] </div><div class="line">character-set-client-handshake = FALSE </div><div class="line">character-set-server = utf8mb4 </div><div class="line">collation-server = utf8mb4_unicode_ci </div><div class="line">init_connect=&apos;SET NAMES utf8mb4&apos;</div></pre></td></tr></table></figure>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p>tomcat 6 + 、jetty 6 + 均在内部支持emoji，无须做任何代码上的修改即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;修改-etc-my-cnf&quot;&gt;&lt;a href=&quot;#修改-etc-my-cnf&quot; class=&quot;headerlink&quot; title=&quot;修改 /etc/my.cnf&quot;&gt;&lt;/a&gt;修改 /etc/my.cnf&lt;/h3&gt;&lt;figure class=&quot;highlight pl
    
    </summary>
    
      <category term="mysql" scheme="http://nudui.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://nudui.github.io/tags/mysql/"/>
    
      <category term="emoji" scheme="http://nudui.github.io/tags/emoji/"/>
    
  </entry>
  
  <entry>
    <title>邮箱消息嵌入到web系统</title>
    <link href="http://nudui.github.io/2015/10/10/%E9%82%AE%E7%AE%B1%E6%B6%88%E6%81%AF%E5%B5%8C%E5%85%A5%E5%88%B0web%E7%B3%BB%E7%BB%9F/"/>
    <id>http://nudui.github.io/2015/10/10/邮箱消息嵌入到web系统/</id>
    <published>2015-10-10T09:19:41.000Z</published>
    <updated>2016-11-17T04:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>用户邮箱（企业邮箱）作为web系统用户标识，监控用户邮箱新邮件，转换为系统消息。</p>
<h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ol>
<li>其实也没啥难点，只是乍一看可能会转不过来</li>
<li>由于企业邮箱非web系统可以控制，网上亦有多人遇此需求而无方案，故而提出鄙人方案。</li>
<li>遇此需求，脑中闪现出第一方案，单独配置一个服务，每隔一段时间遍历所有用户邮箱，查看是否有新消息，如有则在消息表中生成数据，web平台根据新数据进行展示。缺点：用户数目过多时，压力过大，且邮箱中新邮件的频率不是特别大，故而没必要隔段时间遍历，且实现复杂。</li>
</ol>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol>
<li>部署单独服务（非必要），创建用户填写邮箱授权的页面，编写接口进行对单个用户邮箱进行查询。</li>
<li>触发此服务，web平台每隔一段时间，触发1中接口。</li>
<li>如有新邮件，则在消息表中增加数据。</li>
<li>web平台自有消息提醒。</li>
<li>关于如何通过java进行邮箱访问，请自行研究。</li>
<li>最后请大家平时注重方案的构建能力，此方案思考用时半工作日，编码测试半工作日，不要因直观不能实现就轻易说  no  I cant，甚至<strong>理直气壮</strong>的说“不能实现”。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;用户邮箱（企业邮箱）作为web系统用户标识，监控用户邮箱新邮件，转换为系统消息。&lt;/p&gt;
&lt;h3 id=&quot;难点&quot;&gt;&lt;a href=&quot;#难点&quot;
    
    </summary>
    
      <category term="方案" scheme="http://nudui.github.io/categories/%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="mail" scheme="http://nudui.github.io/tags/mail/"/>
    
      <category term="邮箱消息" scheme="http://nudui.github.io/tags/%E9%82%AE%E7%AE%B1%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>文档在线预览方案</title>
    <link href="http://nudui.github.io/2015/10/05/%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E6%96%B9%E6%A1%88/"/>
    <id>http://nudui.github.io/2015/10/05/文档在线预览方案/</id>
    <published>2015-10-05T02:33:49.000Z</published>
    <updated>2016-11-17T14:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>如word文档在线预览，转换为html进行展示。</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><h6 id="poi"><a href="#poi" class="headerlink" title="poi"></a>poi</h6><p>不到万不得已不建议使用，很难转换完美。</p>
<h6 id="七牛"><a href="#七牛" class="headerlink" title="七牛"></a>七牛</h6><ol>
<li>七牛第三方文档转换服务，收费，但不高，api不易懂。</li>
<li>七牛自带转换服务。参考<a href="http://developer.qiniu.com/docs/v6/api/reference/fop/odconv.html。在文档url后拼接" target="_blank" rel="external">http://developer.qiniu.com/docs/v6/api/reference/fop/odconv.html。在文档url后拼接</a>  <code>?odconv/pdf</code> 。<br>缺点：此api在七牛官网无入口，可能是七牛即将弃用的服务，毕竟有了收费的第三方文档服务。</li>
</ol>
<h6 id="某些专做文档服务的服务商"><a href="#某些专做文档服务的服务商" class="headerlink" title="某些专做文档服务的服务商"></a>某些专做文档服务的服务商</h6><ul>
<li>譬如idocv，其为了销售开放了试用接口<a href="http://api.idocv.com/view/url?url=，幸甚使用此接口免费，正好符合需求。" target="_blank" rel="external">http://api.idocv.com/view/url?url=，幸甚使用此接口免费，正好符合需求。</a></li>
<li>缺点：<br>  <em>1，数据（文档）安全性。   
  </em>2，如过多调用，会引起对方警觉，可能屏蔽ip。</li>
</ul>
<h6 id="其他网上方案："><a href="#其他网上方案：" class="headerlink" title="其他网上方案："></a>其他网上方案：</h6><ul>
<li><p>activexobject，此js对象仅支持ie浏览器，且需要用户在浏览器上设置诸多选项。</p>
</li>
<li><p>百度文库。百度要求文档必须上传到文库。</p>
</li>
<li><p>其他方案已忘记，要么是系统局限，要么是操作繁琐，总之弃用。</p>
</li>
</ul>
<h6 id="根据2、3得到的html，可通过iframe进行展示。"><a href="#根据2、3得到的html，可通过iframe进行展示。" class="headerlink" title="根据2、3得到的html，可通过iframe进行展示。"></a>根据2、3得到的html，可通过iframe进行展示。</h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;如word文档在线预览，转换为html进行展示。&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerli
    
    </summary>
    
      <category term="方案" scheme="http://nudui.github.io/categories/%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="word在线预览" scheme="http://nudui.github.io/tags/word%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88/"/>
    
  </entry>
  
  <entry>
    <title>人才短租模式思考</title>
    <link href="http://nudui.github.io/2015/09/24/%E4%BA%BA%E6%89%8D%E7%9F%AD%E7%A7%9F%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%80%83/"/>
    <id>http://nudui.github.io/2015/09/24/人才短租模式思考/</id>
    <published>2015-09-24T07:52:28.000Z</published>
    <updated>2016-11-16T15:26:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想法起因"><a href="#想法起因" class="headerlink" title="想法起因"></a>想法起因</h3><ul>
<li>企业通过猎头招到的人，留职时间约一年（cison说，只能保障渡过试用期）。那么企业会觉不爽，体验变差。</li>
<li>当下互联网盛行，人才思变，很难留职2年以上，一旦离职，个人信用值会降低，不离职，心中难受。</li>
</ul>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>构建人才短租模式</p>
<ol>
<li>对于企业来说，期望人才留职3年以上，但基本不可能，且猎头费依旧高昂。短租模式根据人才租约时间制定猎头费用，企业心理承受会好一些。</li>
<li>对于中高端人才来说，基本只有猎头+内推方式换工作。通过猎头跳槽，心理预期也就是工作一年，期满再跳，不必担心个人信誉负担。</li>
<li>总结起来一句话：窗户纸捅破，你究竟能接受多长时间。根据时长确定薪金与猎头服务费。</li>
</ol>
<h3 id="产品玩法"><a href="#产品玩法" class="headerlink" title="产品玩法"></a>产品玩法</h3><ul>
<li>依旧猎头模式。</li>
<li>每个猎头手里有聊过的人才（能确定接受租约时长）。</li>
<li>人才与平台签约。</li>
</ul>
<h3 id="问题与挑战"><a href="#问题与挑战" class="headerlink" title="问题与挑战"></a>问题与挑战</h3><ul>
<li>通过猎头入职人才的留职时间须调研。</li>
<li>企业与人才对此模式的认可度，或曰企业与人才对此模式的接受时长。</li>
<li>标准的建立。毕竟有越俎代庖嫌疑。</li>
</ul>
<h3 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h3><ul>
<li>弱化企业-员工的概念，就像uber要弱化汽车所有权的概念一样。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;想法起因&quot;&gt;&lt;a href=&quot;#想法起因&quot; class=&quot;headerlink&quot; title=&quot;想法起因&quot;&gt;&lt;/a&gt;想法起因&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;企业通过猎头招到的人，留职时间约一年（cison说，只能保障渡过试用期）。那么企业会觉不爽，体验变差。&lt;/li&gt;
    
    </summary>
    
      <category term="思考" scheme="http://nudui.github.io/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="http://nudui.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>api接口规则</title>
    <link href="http://nudui.github.io/2015/05/16/api%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/"/>
    <id>http://nudui.github.io/2015/05/16/api接口规则/</id>
    <published>2015-05-16T08:07:48.000Z</published>
    <updated>2016-11-17T04:13:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在header中加入参数"><a href="#在header中加入参数" class="headerlink" title="在header中加入参数"></a>在header中加入参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;info&quot;:&#123;</div><div class="line">    &quot;appnm&quot; : &quot;XXX&quot;, （app name）</div><div class="line">    &quot;appVer&quot; : &quot;1.0.0&quot;,    （app版本）</div><div class="line">    &quot;clientType&quot; : &quot;ios&quot;,   （系统类型）</div><div class="line">    &quot;os&quot; : &quot;iPhone OS 10.0.3&quot;,（系统版本）</div><div class="line">    &quot;model&quot; : &quot;iPhone Simulator&quot;,（手机型号）</div><div class="line">    &quot;screen&quot; : &quot;320x568&quot;,（屏幕分辨）</div><div class="line">    &quot;channel&quot; : &quot;app_store&quot;,</div><div class="line">    &quot;did&quot; : &quot;E96B0235-F60C-49F4-B2F9-F1B1041C7E51&quot;（设备号）</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;auth&quot;:&#123;</div><div class="line">    &quot;auth&quot;: &quot;audbbiuf7q74asdh8fa0s9dqjashdugfasd&quot;,（用户唯一标识，如有则认为已登录）</div><div class="line">    &quot;sign&quot;: &quot;fad22321acbd122121&quot;,  （签名）</div><div class="line">    &quot;ts&quot; : &quot;1231231283213&quot;（时间戳）</div><div class="line">    &quot;rand&quot; : &quot;12121212&quot;（一个随机数）</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="url签名算法"><a href="#url签名算法" class="headerlink" title="url签名算法"></a>url签名算法</h3><ol>
<li><code>sign = MD5 ( url + ts + &quot;自定义一个key&quot; )</code></li>
<li>url：去除域名部分，例如 <a href="http://api.xxx.com/aaa/bbb/ccc?p=1" target="_blank" rel="external">http://api.xxx.com/aaa/bbb/ccc?p=1</a>      ===&gt;    /aaa/bbb/ccc?p=1<br>服务端每次请求必须校验sign</li>
</ol>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ol>
<li>在与服务端交互的每个请求，header均须加上1中参数。</li>
<li>接口服务端返回为json类型，且json中数据类型全部为string。</li>
<li>请求参数使用【下划线】类型 ， 数据返回使用【驼峰】，URL使用【下划线】</li>
<li>如果sign不正确，服务端不处理该请求</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;在header中加入参数&quot;&gt;&lt;a href=&quot;#在header中加入参数&quot; class=&quot;headerlink&quot; title=&quot;在header中加入参数&quot;&gt;&lt;/a&gt;在header中加入参数&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="app-api" scheme="http://nudui.github.io/categories/app-api/"/>
    
    
      <category term="api" scheme="http://nudui.github.io/tags/api/"/>
    
      <category term="app" scheme="http://nudui.github.io/tags/app/"/>
    
      <category term="接口规则" scheme="http://nudui.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>app登录注册方案</title>
    <link href="http://nudui.github.io/2015/05/16/app%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C%E6%96%B9%E6%A1%88/"/>
    <id>http://nudui.github.io/2015/05/16/app登录注册方案/</id>
    <published>2015-05-16T08:04:45.000Z</published>
    <updated>2016-11-17T04:13:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="与web开发不同点"><a href="#与web开发不同点" class="headerlink" title="与web开发不同点"></a>与web开发不同点</h3><ul>
<li>web中有浏览器角色，保持用户登录状态可以根据cookie、sessionid等策略来实现。</li>
<li>而app不能（或不方便、不能自定义内容），开发者需要进行面向app的模拟session实现。</li>
</ul>
<hr>
<h3 id="借助工具"><a href="#借助工具" class="headerlink" title="借助工具"></a>借助工具</h3><ul>
<li>memcached\redis或其他进程外缓存。</li>
</ul>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol>
<li>在db中创建auth表，须包含字段：id , userid(或mobile), auth , createtime。</li>
<li>注册时，user表中添加数据后，auth表中也添加记录，auth可自行选择加密方案。</li>
<li>登录时：<ul>
<li>1，user表中查找成功。</li>
<li>2，服务端从db中获取auth，放入缓存中。</li>
<li>3，将auth返回给移动端。</li>
</ul>
</li>
<li>移动端每次请求服务端，均须将auth信息放入header中。服务端在拦截器中校验auth（先从缓存中取，如无则取db，然后放入缓存）是否正确、定位是哪个用户。</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol>
<li>web中默认未登录状态。移动端默认为登录状态（每次打开app只要有auth信息就默认为登录）。</li>
<li>在缓存中，auth要设有效时长。</li>
<li>缓存中的数据结构为  auth:userid(mobile)。</li>
<li>当下多数app将注册与登录合二为一，使用手机号+短信验证码实现注册即登录，此时实现方案应相应作出修改，在此不述。</li>
<li>web开发也可类似上述方案进行开发，不使用httpsession，原因不述。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;与web开发不同点&quot;&gt;&lt;a href=&quot;#与web开发不同点&quot; class=&quot;headerlink&quot; title=&quot;与web开发不同点&quot;&gt;&lt;/a&gt;与web开发不同点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;web中有浏览器角色，保持用户登录状态可以根据cookie、sessio
    
    </summary>
    
      <category term="app-api" scheme="http://nudui.github.io/categories/app-api/"/>
    
    
      <category term="app" scheme="http://nudui.github.io/tags/app/"/>
    
      <category term="auth" scheme="http://nudui.github.io/tags/auth/"/>
    
  </entry>
  
  <entry>
    <title>mac os 配置maven</title>
    <link href="http://nudui.github.io/2014/07/16/mac-os-%E9%85%8D%E7%BD%AEmaven/"/>
    <id>http://nudui.github.io/2014/07/16/mac-os-配置maven/</id>
    <published>2014-07-16T08:29:03.000Z</published>
    <updated>2016-11-16T10:01:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载maven"><a href="#下载maven" class="headerlink" title="下载maven"></a>下载maven</h3><p><a href="http://maven.apache.org/download.cgi" target="_blank" rel="external">http://maven.apache.org/download.cgi</a></p>
<h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p>解压到 /usr/local   重命名为maven</p>
<h3 id="新建（如无）-bash-profile"><a href="#新建（如无）-bash-profile" class="headerlink" title="新建（如无）.bash_profile"></a>新建（如无）.bash_profile</h3><p>编辑内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</div><div class="line"></div><div class="line">M3_HOME=/usr/local/maven3</div><div class="line"></div><div class="line">PATH=$M3_HOME/bin:$PATH</div><div class="line"></div><div class="line">export JAVA_HOME</div><div class="line"></div><div class="line">export M3_HOME</div><div class="line"></div><div class="line">export PATH</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><code>mvn -version</code></p>
<h3 id="如未生效"><a href="#如未生效" class="headerlink" title="如未生效"></a>如未生效</h3><p><code>source .bash_profile</code> 使之生效</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载maven&quot;&gt;&lt;a href=&quot;#下载maven&quot; class=&quot;headerlink&quot; title=&quot;下载maven&quot;&gt;&lt;/a&gt;下载maven&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/download.cgi&quot; tar
    
    </summary>
    
      <category term="maven" scheme="http://nudui.github.io/categories/maven/"/>
    
    
      <category term="maven" scheme="http://nudui.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>抄书学算法（02）--集合、散列表</title>
    <link href="http://nudui.github.io/2013/11/17/%E6%8A%84%E4%B9%A6%E5%AD%A6%E7%AE%97%E6%B3%95%EF%BC%8802%EF%BC%89-%E9%9B%86%E5%90%88/"/>
    <id>http://nudui.github.io/2013/11/17/抄书学算法（02）-集合/</id>
    <published>2013-11-17T15:56:30.000Z</published>
    <updated>2016-11-17T04:12:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何谓集合"><a href="#何谓集合" class="headerlink" title="何谓集合"></a>何谓集合</h3><ul>
<li>基于数组的拓展，无长度限制。</li>
<li><strong>列表</strong>：有序集合。链表、队列、栈。使用数组实现。</li>
<li><strong>集</strong>：无序、数据不能重复。使用散列表实现。</li>
<li><strong>多重集</strong>：无序、数据可重复。可通过排序转换为列表。（不知道是什么鬼，没用过）</li>
<li><strong>数、图</strong>：略。</li>
</ul>
<h3 id="列表特点（变长数组）"><a href="#列表特点（变长数组）" class="headerlink" title="列表特点（变长数组）"></a>列表特点（变长数组）</h3><ul>
<li>变长。在不够长的时候通过数组拷贝的方式创建新数组。</li>
<li>拷贝的方式会造成性能耗损。</li>
<li>查询欠佳。</li>
<li>查询、修改的时间复杂度为O(n)。</li>
<li>查找顺序存储的结构类型，在数据量大的情况下，依旧是从0开始，一个个的去访问。效率很低。</li>
</ul>
<h3 id="何谓散列表"><a href="#何谓散列表" class="headerlink" title="何谓散列表"></a>何谓散列表</h3><ul>
<li>又称“<strong>哈希表</strong>”，能够通过key直接访问到具体元素。通过key访问一个映射表来得到value的地址。这个映射表也称为“<strong>散列函数</strong>”或者“<strong>哈希函数</strong>”。存放记录的数组叫做“<strong>散列表</strong>”。</li>
<li>通过不同的key，可能映射到相同的地址，这种现象叫做 “碰撞” 。</li>
<li>散列表有两种用法，一种是k=v，即set。另一种即map。</li>
</ul>
<h4 id="哈希函数的实现"><a href="#哈希函数的实现" class="headerlink" title="哈希函数的实现"></a>哈希函数的实现</h4><p>考虑因素：关键字的长度、哈希表的大小、关键字的分布情况、记录的查找频率等</p>
<ul>
<li><p><strong>直接寻址法</strong>：取关键字或者关键字的某个线性函数值作为散列地址。</p>
</li>
<li><p><strong>数字分析法</strong>：通过对数据的分析，发现冲突较小的部分，构造散列地址。</p>
</li>
<li><p><strong>取随机数法</strong>：取关键字的随机值作为散列地址。适用于关键字长度不一致的情况。</p>
</li>
</ul>
<h4 id="哈希函数冲突处理"><a href="#哈希函数冲突处理" class="headerlink" title="哈希函数冲突处理"></a>哈希函数冲突处理</h4><p>对不同的key进行hash运算，可能会出现相同的结果。处理如下：</p>
<ul>
<li><p><strong>开放地址法</strong>： 简单地讲，也就是说，一间厕所，来了一个顾客就蹲其对应的位置，如果又来一个顾客，把厕所单间门拉开，一看里面有位童鞋正在用劲，那么怎么办？很自然的，拉另一个单间的门，看看有人不，有的话就继续找坑。当然了，一般来说，这个顾客不会按顺序一个一个地拉厕所门，而是会去拉他认为有可能没有被占用的单间的门，这可以通过闻味道，听声音来辨别，这就是寻址查找算法。</p>
</li>
<li><p><strong>再哈希法</strong>：产生冲突后使用关键字的其他部分再次进行计算取址，如还是冲突则再用其它的部分hash。缺点：时间增加了。</p>
</li>
<li><strong>链地址法</strong>：在地址上做一个链表，存储。</li>
<li><strong>公共溢出区</strong>：建立一个公共溢出区。</li>
</ul>
<h4 id="散列表存储结构"><a href="#散列表存储结构" class="headerlink" title="散列表存储结构"></a>散列表存储结构</h4><ul>
<li>一个好的散列设计，除了一个良好的hash函数外，还要有好的冲突处理方式。一般选择链地址法。</li>
<li>数组 + 链表</li>
</ul>
<h4 id="散列表的特点"><a href="#散列表的特点" class="headerlink" title="散列表的特点"></a>散列表的特点</h4><ul>
<li>访问速度快：通过散列函数将key指定到一个地址上，所以在访问的时候不需要一个一个查找。增删改查都很快。（！！！！存疑，hash方法到底是得到一个数组index还是内存地址）</li>
<li>需要额外的空间：散列表实际上不太可能满载；额外空间处理冲突。</li>
<li>无序。</li>
<li>可能会产生碰撞，使得散列复杂。</li>
<li>数据量大（map快满载）时，性能下降。（冲突太多，在链表中太麻烦）</li>
</ul>
<h4 id="散列表的适用场景"><a href="#散列表的适用场景" class="headerlink" title="散列表的适用场景"></a>散列表的适用场景</h4><p>适合无序的，需要快速访问的情况。</p>
<ul>
<li>缓存。</li>
<li>快速查找。判断set中是否存在某指定元素</li>
</ul>
<h4 id="散列表性能分析"><a href="#散列表性能分析" class="headerlink" title="散列表性能分析"></a>散列表性能分析</h4><ul>
<li><p>如果没有冲突，通过对key进行hash寻址，完全是O(1)的效率，但是冲突在所难免。通常使用链地址法来处理冲突。碰撞之后需要遍历链表，时间复杂度为O(L)，L为链表长度。</p>
</li>
<li><p>当map负载很大的时候，说明大部分地址已经有值了，此时再添加元素，势必碰撞，势必走链表，于是性能下降。此时应当扩容，java的hashMap扩容因子为0.75，当负载达到75%的时候进行扩容。扩容之后进行大排版，也许之前在链表中存储，现在在数组中存储。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何谓集合&quot;&gt;&lt;a href=&quot;#何谓集合&quot; class=&quot;headerlink&quot; title=&quot;何谓集合&quot;&gt;&lt;/a&gt;何谓集合&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基于数组的拓展，无长度限制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表&lt;/strong&gt;：有序集合。链表、队列、栈
    
    </summary>
    
      <category term="抄书学算法" scheme="http://nudui.github.io/categories/%E6%8A%84%E4%B9%A6%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://nudui.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="存疑" scheme="http://nudui.github.io/tags/%E5%AD%98%E7%96%91/"/>
    
  </entry>
  
  <entry>
    <title>抄书学算法（01）--数组</title>
    <link href="http://nudui.github.io/2013/11/16/%E6%8A%84%E4%B9%A6%E5%AD%A6%E7%AE%97%E6%B3%95%EF%BC%8801%EF%BC%89-%E6%95%B0%E7%BB%84/"/>
    <id>http://nudui.github.io/2013/11/16/抄书学算法（01）-数组/</id>
    <published>2013-11-16T14:38:11.000Z</published>
    <updated>2016-11-16T15:59:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何谓数组"><a href="#何谓数组" class="headerlink" title="何谓数组"></a>何谓数组</h3><ol>
<li>将 <strong>有限个同类型</strong> 的元素放在地址连续的内存中，以一个变量命名，通过序号进行访问指定元素。</li>
<li>使用前需要预估好长度，数组不能动态增长或者缩小。有余则费，不足无奈。</li>
</ol>
<h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><ol>
<li>确定一个值作为长度length。</li>
<li>根据声明的数据类型开辟内存空间（不同类型开辟的空间也不同）。</li>
<li>对内存空间的每一个元素都赋默认值。</li>
</ol>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int[] num = new int[10];   //每个值都为0</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int[] num = new int[10];</div><div class="line">num[0] = 1;</div><div class="line">num[1] = 2;</div><div class="line">num[2] = 3;     //部分初始化</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int[] num = &#123;1, 2, 3&#125;   //显示初始化</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">num.length;     //length属性</div></pre></td></tr></table></figure>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li><strong>长度固定</strong>。如果还想继续添加元素，只能另创一个数组。</li>
<li>顺序访问。必须从第1个元素开始访问，虽然编程中可以通过下标指定元素，但计算机在处理时还是顺序访问。</li>
</ol>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>由于长度固定，所以适用于不会变化的业务。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;何谓数组&quot;&gt;&lt;a href=&quot;#何谓数组&quot; class=&quot;headerlink&quot; title=&quot;何谓数组&quot;&gt;&lt;/a&gt;何谓数组&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;将 &lt;strong&gt;有限个同类型&lt;/strong&gt; 的元素放在地址连续的内存中，以一个变量命名，通过序号进行访问
    
    </summary>
    
      <category term="抄书学算法" scheme="http://nudui.github.io/categories/%E6%8A%84%E4%B9%A6%E5%AD%A6%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://nudui.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
