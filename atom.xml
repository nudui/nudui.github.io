<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>受命于天</title>
  <subtitle>既寿永昌- java、golang</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nudui.github.io/"/>
  <updated>2016-11-26T04:25:16.000Z</updated>
  <id>http://nudui.github.io/</id>
  
  <author>
    <name>受命于天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>服务端开发的一些小问题</title>
    <link href="http://nudui.github.io/2016/11/26/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://nudui.github.io/2016/11/26/服务端开发的一些小问题/</id>
    <published>2016-11-25T17:39:57.000Z</published>
    <updated>2016-11-26T04:25:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="Q：接口一般规则"><a href="#Q：接口一般规则" class="headerlink" title="Q：接口一般规则"></a>Q：接口一般规则</h4><p><strong>A</strong>：参照：<br><a href="http://nudui.github.io/2015/05/16/api%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/">http://nudui.github.io/2015/05/16/api%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/</a></p>
<h4 id="Q：如何保持会话-登录时到底发生了神马"><a href="#Q：如何保持会话-登录时到底发生了神马" class="headerlink" title="Q：如何保持会话,登录时到底发生了神马"></a>Q：如何保持会话,登录时到底发生了神马</h4><p><strong>A</strong>：不建议使用httpsession，如果用httpsession，则须做好session共享策略。我的方案：<a href="http://nudui.github.io/2015/05/16/app%E4%BC%9A%E8%AF%9D%E6%96%B9%E6%A1%88/">http://nudui.github.io/2015/05/16/app%E4%BC%9A%E8%AF%9D%E6%96%B9%E6%A1%88/</a></p>
<p><strong>标注一下</strong>：这个方案不是我原创，是跟一老大哥学的，消化了好一阵时间。（不过，当我消化了这个方案，这应该就算是我的了吧）</p>
<h4 id="Q：如果有人刷我的接口肿么办"><a href="#Q：如果有人刷我的接口肿么办" class="headerlink" title="Q：如果有人刷我的接口肿么办"></a>Q：如果有人刷我的接口肿么办</h4><p><strong>A</strong>：最近我刚刷了一个场子不小的app的短信验证码接口，<strong>详情    </strong>及<strong> 解决办法 </strong>请看如下：<a href="http://blog.csdn.net/z744760295/article/details/53345113" target="_blank" rel="external">http://blog.csdn.net/z744760295/article/details/53345113</a></p>
<h4 id="Q：选用云存储还是自存储"><a href="#Q：选用云存储还是自存储" class="headerlink" title="Q：选用云存储还是自存储"></a>Q：选用云存储还是自存储</h4><p><strong>A</strong>：前期建议选用云存储，云存储平台都会有免费额度。七牛云提供10G空间，100万次GET请求；阿里云提供5G，请求次数也不会太低，团队初期足够了。</p>
<h4 id="Q：那如果有一天leader要求存储必须自有化，那已在db中存储的云资源uri怎么办"><a href="#Q：那如果有一天leader要求存储必须自有化，那已在db中存储的云资源uri怎么办" class="headerlink" title="Q：那如果有一天leader要求存储必须自有化，那已在db中存储的云资源uri怎么办"></a>Q：那如果有一天leader要求存储必须自有化，那已在db中存储的云资源uri怎么办</h4><p><strong>A</strong>：使用云存储之前，就必须得考虑好这个问题，七牛和ali都提供自定义域名服务，在自己的域名下做配置，这样图片uri就是通过自有域名进行资源定位。此时，将云中有用的图片下载，根据路径进行文件服务器配置即可。这样，原存储云的文件就可以转入自有服务器，且uri不会改变。</p>
<h4 id="Q：如果我想一直使用云，某天10G空间不够了怎么办"><a href="#Q：如果我想一直使用云，某天10G空间不够了怎么办" class="headerlink" title="Q：如果我想一直使用云，某天10G空间不够了怎么办"></a>Q：如果我想一直使用云，某天10G空间不够了怎么办</h4><p><strong>A</strong>：我这有个投机取巧的办法：如果某天在七牛上的空间已经使用85%，这时就着手再申请一个账号好了，在服务端代码中改一下七牛的配置，切换到第二个账号，这不就ok了吗，原uri不必去管，反正七牛也不会删掉（七牛也不知道这两个账号有啥关联），不过在第二个账号绑定域名时，还是再开一个子域名比较好，不要对第一个账号的资源进行侵扰。</p>
<h4 id="Q：如果某天七牛发现我的小聪明，把我封掉怎么办"><a href="#Q：如果某天七牛发现我的小聪明，把我封掉怎么办" class="headerlink" title="Q：如果某天七牛发现我的小聪明，把我封掉怎么办"></a>Q：如果某天七牛发现我的小聪明，把我封掉怎么办</h4><p><strong>A</strong>：无论是哪个云，在封号前必定多方联络你，这时可把那些云图片资源取出，再放入其他的云，执行同样的策略。</p>
<h4 id="Q：如果其他的云也封怎么办，不能一直这样下去啊"><a href="#Q：如果其他的云也封怎么办，不能一直这样下去啊" class="headerlink" title="Q：如果其他的云也封怎么办，不能一直这样下去啊"></a>Q：如果其他的云也封怎么办，不能一直这样下去啊</h4><p><strong>A</strong>：上述策略，都是为了省！省！省！省，则必定有一些荆棘。不过，就算是这个云把你封掉，也不见得就没办法。【微博】或者其他大sns，它肯定不会删图片，它还开放了各种接口，咱们可以把微博变成我们的图片服务器，这样不就好了吗。微博的水印问题，网上能找到设置方法。<strong>不过，把微博改成自己的文件服务器，是不是挺cool的</strong>。</p>
<h4 id="Q：短信接口都有验证码条数限制，这个也能有对策吧"><a href="#Q：短信接口都有验证码条数限制，这个也能有对策吧" class="headerlink" title="Q：短信接口都有验证码条数限制，这个也能有对策吧"></a>Q：短信接口都有验证码条数限制，这个也能有对策吧</h4><p><strong>A</strong>：没错，这个策略与云存储方案类似。单个短信平台对于验证码会有单独的限制，从3条/h ~ 7条/h 不等，我在做app的时候，也会遇到这个问题，产品要求必须每小时能发8条，打电话给短信客服，确实是可以增加。但是，总觉着不舒服，于是有了以下的方案：在阿里大鱼上申请两个（或多个）账号，短信签名全部一致（不要质疑短信平台是否会允许，亲测有效，反馈给阿里大鱼，人家说没遇到过这种情况，也就默许了）。之后再代码中，只要第一个账号发送失败，就走第二个账号。</p>
<p>当然，如果不嫌麻烦，也可以使用多个不同平台的方式，只是每个平台的接口都不一样。使用单平台多账号，好处是扩展方便，不用改多少代码。</p>
<h4 id="Q：app版本控制怎么玩"><a href="#Q：app版本控制怎么玩" class="headerlink" title="Q：app版本控制怎么玩"></a>Q：app版本控制怎么玩</h4><p><strong>A</strong>：看到网上好多人说单独开一个接口，判断是否需要更新app。这个方案还可以吧，只是需要移动端每次打开app时请求服务端，略有些麻烦。<strong>其实大可不必，服务端完全不需要开辟单独接口</strong>：移动每次与服务端交互，服务端在header中能获取这个请求的具体版本号，缓存必须更新的版本号的value，在拦截器中计算这个版本号的value，看看是否需要强制更新，如果需要，则在拦截器阶段就返回错误码给app，app根据错误码进行提示、下载。<strong><em>这个方案的好处是</em></strong>，无须移动开发人员做太多，覆盖面广，网上的方案只有在特定某个动作触发校验，我的方案是全局校验。</p>
<h4 id="Q：有的app（回家吃饭app），换了个账号登录，竟然收到了原账号的消息，这咋回事"><a href="#Q：有的app（回家吃饭app），换了个账号登录，竟然收到了原账号的消息，这咋回事" class="headerlink" title="Q：有的app（回家吃饭app），换了个账号登录，竟然收到了原账号的消息，这咋回事"></a>Q：有的app（回家吃饭app），换了个账号登录，竟然收到了原账号的消息，这咋回事</h4><p><strong>A</strong>：‘回家吃饭’这个app，业务真的不错，不过它确实有那个问题（八月份的时候）。</p>
<p><strong>先来说说这是怎么发生的：</strong>app登录后，会将devicetoken发送给服务端，服务端将devicetoken与用户id进行绑定（允许一个账号多点登录），这样每次需要push的时候，就可以根据devicetoken进行定向push。那为什么会收到原账号的push呢，因为只  <strong>做了bind，没做unbind</strong> ，‘回家吃饭’没考虑     <strong>app不重新下载而换号登录</strong> 的问题（重新下载app时，devicetoken会发生变化）！</p>
<p><strong>怎么解决：</strong>退出登录时服务端必须<strong>解绑</strong>相应的devicetoken。</p>
<h3 id="注：-本人水平有限"><a href="#注：-本人水平有限" class="headerlink" title="注： 本人水平有限"></a>注： 本人水平有限</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;h4 id=&quot;Q：接口一般规则&quot;&gt;&lt;a href=&quot;#Q：接口一般规则&quot; class=&quot;headerlink&quot; title=&quot;Q：接口一般规则&quot;
    
    </summary>
    
      <category term="app-api" scheme="http://nudui.github.io/categories/app-api/"/>
    
    
      <category term="app" scheme="http://nudui.github.io/tags/app/"/>
    
      <category term="api" scheme="http://nudui.github.io/tags/api/"/>
    
      <category term="接口规则" scheme="http://nudui.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>刷某体育票务app短信验证码接口-接口安全考究</title>
    <link href="http://nudui.github.io/2016/11/25/%E5%88%B7app%E7%9F%AD%E4%BF%A1%E6%8E%A5%E5%8F%A3-%E6%8E%A5%E5%8F%A3%E5%AE%89%E5%85%A8%E8%80%83%E7%A9%B6/"/>
    <id>http://nudui.github.io/2016/11/25/刷app短信接口-接口安全考究/</id>
    <published>2016-11-25T15:03:43.000Z</published>
    <updated>2016-11-26T03:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="观察某体育票务app的接口结构"><a href="#观察某体育票务app的接口结构" class="headerlink" title="观察某体育票务app的接口结构"></a>观察某体育票务app的接口结构</h3><p>此app内有某语言大神，余心诚向往，隐去app名讳。<br>短信接口如下：</p>
<p><img src="http://7q5c85.com1.z0.glb.clouddn.com/api3333.png" alt="短信验证码"><br>圈1：</p>
<ul>
<li>参数s：应该是对url进行签名</li>
<li>参数t：时间戳</li>
<li>参数mobile：接收短信验证码的手机</li>
<li>http/1.1 : http协议</li>
</ul>
<p>圈2：</p>
<ul>
<li>cookie：该团队应该是原做web，习惯于cookie、session的模式（当然，这个路子是正确的，只是这个名字…暴露了自己的历史包袱）。在app中通过在header中添加参数来实现。此处与本题无关。</li>
</ul>
<p>圈3：</p>
<ul>
<li>ChannelId：一个对于业务相关的参数，无甚可说。</li>
<li>token：应该是对设备的唯一标识吧。应该不是auth，毕竟还没登录，何来auth。</li>
</ul>
<p>从上可知，模拟这个【发送短信验证码】请求，最多需要这么几个参数即可。笔者用postman实践，cookie可以不用管它（话说，这个cookie真的有价值吗？），传不传都无所谓。参数t，对方只用于签名算法。</p>
<p>综上，需要参数s、t、参数mobile、参数Channel（放在header中）、参数token（放在header中）。</p>
<h3 id="模拟开始"><a href="#模拟开始" class="headerlink" title="模拟开始"></a>模拟开始</h3><p><strong>某月24日：</strong></p>
<p><img src="http://7q5c85.com1.z0.glb.clouddn.com/%E6%A8%A1%E6%8B%9Fapi.png" alt="image description"></p>
<p>诸位应当看到，笔者已经告知对方（通过一个多余的参数“tip”），该接口（或者整个app的所有接口），都有可能被模拟，希望对方能够进行修改。<strong>注：</strong>笔者手机号也在区间内，收到了通过程序发送的短信验证码。</p>
<p><strong>次日：</strong></p>
<p><img src="http://7q5c85.com1.z0.glb.clouddn.com/ciri.png" alt="image description"></p>
<p>对方完全任由刷。</p>
<h3 id="模拟后话"><a href="#模拟后话" class="headerlink" title="模拟后话"></a>模拟后话</h3><ol>
<li>次日的再次模拟，依然请求成功（笔者的手机号在此序列）。</li>
<li>对方将笔者ip做了特殊处理（此项排除，笔者手机收到了验证码）。</li>
<li>对方没有看到相应日志，没有发现接口已经被模拟。（不太可能，毕竟不是小team，就算是小team，也早该发现）</li>
<li>对方没有看到tip参数，没有在日志中记录收到的全部参数。（感觉还是不可能，都不是小作坊，我这一个岗位一个人的小摊子还会注意到这点。。）</li>
<li>原因究竟是什么呢？</li>
</ol>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ol>
<li>笔者毕业三年，路已偏歪，没在大型厂子待过。</li>
<li>可能笔者的整篇文章会见笑于大方家（大神甲：这年轻人太嫩，自以为破解了这个app，其实。。）</li>
<li>不是hacker（水平真的达不到，差的不是一点），却心向往之。</li>
<li><strong><strong>个人对于接口安全的方案</strong></strong>（方案师承毕业时的团队）：<a href="http://nudui.online/2015/05/16/api接口规则/" target="_blank" rel="external">http://nudui.online/2015/05/16/api接口规则/</a>。</li>
<li>求明白人告诉我，我这到底是不是班门弄斧。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;观察某体育票务app的接口结构&quot;&gt;&lt;a href=&quot;#观察某体育票务app的接口结构&quot; class=&quot;headerlink&quot; title=&quot;观察某体育票务app的接口结构&quot;&gt;&lt;/a&gt;观察某体育票务app的接口结构&lt;/h3&gt;&lt;p&gt;此app内有某语言大神，余心诚向往，
    
    </summary>
    
      <category term="app-api" scheme="http://nudui.github.io/categories/app-api/"/>
    
    
      <category term="app" scheme="http://nudui.github.io/tags/app/"/>
    
      <category term="api" scheme="http://nudui.github.io/tags/api/"/>
    
      <category term="接口规则" scheme="http://nudui.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>beego(01)</title>
    <link href="http://nudui.github.io/2016/11/21/beego-01/"/>
    <id>http://nudui.github.io/2016/11/21/beego-01/</id>
    <published>2016-11-21T08:52:21.000Z</published>
    <updated>2016-11-21T10:57:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>get beego : <a href="https://my.oschina.net/ichendong/blog/761467" target="_blank" rel="external">https://my.oschina.net/ichendong/blog/761467</a></p>
<p>gov docs : <a href="https://beego.me" target="_blank" rel="external">https://beego.me</a></p>
<h3 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h3><p>mac环境下快速启动工作目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm /usr/local/bin/subl</div><div class="line"></div><div class="line">ln -s &quot;/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl&quot; /usr/local/bin/subl</div></pre></td></tr></table></figure>
<p>在 ~/ 目录下创建.sh</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim work_hello.sh</div></pre></td></tr></table></figure>
<p>work_hello.sh ：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/bash</div><div class="line">subl /Users/jack/gopath/src/hello</div></pre></td></tr></table></figure></p>
<p>对该sh赋予执行权限</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 777 work_hello.sh</div></pre></td></tr></table></figure>
<p>开始工作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd</div><div class="line">./work_hello.sh</div></pre></td></tr></table></figure>
<p>自动在sublime中打开工作空间。如有多个工作空间，则在~/目录下创建多个sh即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;start&quot;&gt;&lt;a href=&quot;#start&quot; class=&quot;headerlink&quot; title=&quot;start&quot;&gt;&lt;/a&gt;start&lt;/h3&gt;&lt;p&gt;get beego : &lt;a href=&quot;https://my.oschina.net/ichendong/blog
    
    </summary>
    
      <category term="beego" scheme="http://nudui.github.io/categories/beego/"/>
    
    
      <category term="beego" scheme="http://nudui.github.io/tags/beego/"/>
    
  </entry>
  
  <entry>
    <title>mac安装beego</title>
    <link href="http://nudui.github.io/2016/11/21/mac%E5%AE%89%E8%A3%85beego/"/>
    <id>http://nudui.github.io/2016/11/21/mac安装beego/</id>
    <published>2016-11-20T21:56:20.000Z</published>
    <updated>2016-11-20T22:02:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="由于按照谢孟军git上的说明，安装出现各种错误："><a href="#由于按照谢孟军git上的说明，安装出现各种错误：" class="headerlink" title="由于按照谢孟军git上的说明，安装出现各种错误："></a>由于按照谢孟军git上的说明，安装出现各种错误：</h4><ul>
<li>cannot download, $GOPATH not set. For more details see: go help gopath</li>
<li>liteide GolangFmt: Could not find go env</li>
<li>其他导致ide出现问题的错误</li>
</ul>
<p>几经周折，安装如下：<br><a href="https://my.oschina.net/ichendong/blog/761467" target="_blank" rel="external">https://my.oschina.net/ichendong/blog/761467</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;由于按照谢孟军git上的说明，安装出现各种错误：&quot;&gt;&lt;a href=&quot;#由于按照谢孟军git上的说明，安装出现各种错误：&quot; class=&quot;headerlink&quot; title=&quot;由于按照谢孟军git上的说明，安装出现各种错误：&quot;&gt;&lt;/a&gt;由于按照谢孟军git上的说明
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-5-数据</title>
    <link href="http://nudui.github.io/2016/11/18/golang%E7%AC%94%E8%AE%B0-5-%E6%95%B0%E6%8D%AE/"/>
    <id>http://nudui.github.io/2016/11/18/golang笔记-5-数据/</id>
    <published>2016-11-18T02:22:41.000Z</published>
    <updated>2016-11-18T03:30:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串为不可变字节（byte）序列，是符合结构。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">type stringStruct struct&#123;</div><div class="line">    str unsafe.Pointer</div><div class="line">    len int</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>头部指针指向数组，无NULL结尾，默认为UTF-8存储Unicode字符。</p>
<p>len返回的是数组的字节长度。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    s := &quot;a&quot;</div><div class="line">    fmt.Println(s[0])   //  97</div><div class="line">    </div><div class="line">    fmt.Println(&amp;s[0])   //  报错：cannot take the address of s[0]</div><div class="line">    </div><div class="line">    s = s + &quot;b&quot;</div><div class="line">    fmt.Println(s &gt; &quot;aa&quot;)   //true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>字符串遍历<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    s := &quot;受命于天&quot;</div><div class="line">    for i := 0; i &lt; len(s); i++ &#123;</div><div class="line">        fmt.Println(s[i])       //输出其byte ， 4 * 3 = 12 个字节</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    for index, val := range s &#123;</div><div class="line">        fmt.Println(index, val)        //输出每个汉字</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改字符串<br>要求改字符串，须将其转换为可变类型（[ ]rune 或者 [ ]byte），修改之后再转回来。但，不管如何转换，都必定重新分配内存并复制数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;字符串为不可变字节（byte）序列，是符合结构。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-4-函数</title>
    <link href="http://nudui.github.io/2016/11/17/golang%E7%AC%94%E8%AE%B0-4-%E5%87%BD%E6%95%B0/"/>
    <id>http://nudui.github.io/2016/11/17/golang笔记-4-函数/</id>
    <published>2016-11-17T15:14:54.000Z</published>
    <updated>2016-11-18T19:38:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>结构化最小模块单元，将复杂的算法过程分解为若干个较小任务，这些认为可在多处复用。<br><strong>函数是一等公民</strong></p>
<ul>
<li>无须前置声明。（未解其意，何谓“前置声明”）</li>
<li>不支持命名嵌套定义。（未解其意，何谓“命名嵌套定义”）</li>
<li>不支持同名函数重载。</li>
<li>不支持默认参数。（哪些语言的函数有默认参数，未解其意）</li>
<li>支持不定长变参。</li>
<li>支持<strong>多返回值</strong>。</li>
<li>支持命名返回值。</li>
<li>支持<strong>匿名函数</strong>与<strong>闭包</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func hello()&#123;</div><div class="line">    fmt.Println(&quot;hello world&quot;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">func exec(f func())&#123;    //函数作为参数</div><div class="line">    f()</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    h := hello  </div><div class="line">    exec(h)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数只能判断是否为nil，不能判断其他</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func a ()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func b()&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    fmt.Println(a == nil)     // 输出 false  </div><div class="line">    fmt.Pringln(a == b)       //报错，无效操作</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul>
<li>无论是指针、引用类型还是其他类型参数，都是<strong>值传递</strong>。区别无非是<strong>拷贝</strong>目标对象还是拷贝指针。在函数内对参数进行操作，都不会影响原值。</li>
<li>在函数调用前，会为形参和返回值分配内存空间，并将实参拷贝到形参的内存上。</li>
</ul>
<h4 id="变参"><a href="#变参" class="headerlink" title="变参"></a>变参</h4><p>变参实际上是一个切片。只能接收同类型参数</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;结构化最小模块单元，将复杂的算法过程分解为若干个较小任务，这些认为可在多处复用。&lt;br&gt;&lt;strong&gt;函数是一等公民&lt;/strong&gt;&lt;/
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-3-表达式</title>
    <link href="http://nudui.github.io/2016/11/17/golang%E7%AC%94%E8%AE%B0-3-%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://nudui.github.io/2016/11/17/golang笔记-3-表达式/</id>
    <published>2016-11-17T11:06:22.000Z</published>
    <updated>2016-11-17T15:10:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h5 id="25个关键字"><a href="#25个关键字" class="headerlink" title="25个关键字"></a>25个关键字</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">break continue, if else , go chan , var const type </div><div class="line"></div><div class="line">for range , go goto defer , switch case default fallthrough</div><div class="line"></div><div class="line">package import , func struct return map select</div></pre></td></tr></table></figure>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if .. else .."></a>if .. else ..</h4><ul>
<li><p>表达式的值必须是bool类型。</p>
</li>
<li><p>表达式可以执行初始化语句。如下 :</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var x int </div><div class="line"></div><div class="line">func xinit()&#123;</div><div class="line">    x = 1000</div><div class="line">&#125;</div><div class="line"></div><div class="line">func main()&#123;</div><div class="line">    if xinit(); x &gt; 100&#123;</div><div class="line">        ... //  可以执行</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h4><p>无须break，自动在相应的case处执行完毕中断</p>
<ul>
<li>一般形式 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    a , b , c := 0 , 1 , 2</div><div class="line">    </div><div class="line">    switch x &#123;</div><div class="line">        case a , b : </div><div class="line">            fmt.Println(&quot;0 或者 1&quot;)</div><div class="line">        case 4 : </div><div class="line">            fmt.Println(&quot;值为4&quot;)</div><div class="line">        default : </div><div class="line">            fmt.Println(&quot;default value&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>表达式形式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    a , b , c := 0 , 1 , 2</div><div class="line">    </div><div class="line">    switch x := 100 ; x &#123;</div><div class="line">        case a , b : </div><div class="line">            fmt.Println(&quot;0 或者 1&quot;)</div><div class="line">        case 4 : </div><div class="line">            fmt.Println(&quot;值为4&quot;)</div><div class="line">        default : </div><div class="line">            fmt.Println(&quot;default value&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>fallthrough   必须放在case块的末尾</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    </div><div class="line">    switch x := 100 ; x &#123;</div><div class="line">        case a , b : </div><div class="line">            fmt.Println(&quot;0 或者 1&quot;)</div><div class="line">        case 100 : </div><div class="line">            x += 10</div><div class="line">            fmt.Println(x)</div><div class="line">            </div><div class="line">            fallthrough     //无条件执行下一个case，default除外。</div><div class="line">        case 101 :</div><div class="line">            x += 10</div><div class="line">            fmt.Println(x)</div><div class="line">                            //如果还有fallthrough，则继续执行下一个非default的case</div><div class="line">        default : </div><div class="line">            fmt.Println(&quot;default value&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<ol>
<li>不能出现重复的case。</li>
<li>有时switch可代替if语句。</li>
</ol>
<h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><ul>
<li>golang中只有for这一种循环。</li>
<li>for循环完成了java中的while循环、for..each循环。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//普通for循环</div><div class="line">for i := 0 ; i &lt; 100 ; i ++ &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//相当于while循环</div><div class="line">for x &lt; 10 &#123;</div><div class="line">   ... </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//相当于while true</div><div class="line">for &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>for range</strong> 用于数据迭代，支持字符串、数组、数组指针、切片、字典、通道类型、键值数据</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    data := [10]int&#123;1, 2, 3, 4 &#125;</div><div class="line">    </div><div class="line">    for index , v := range data&#123;</div><div class="line">        fmt.Print(&quot;index is &quot; + index)</div><div class="line">        fmt.Println(&quot;value is &quot; + v)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关键字&quot;&gt;&lt;a href=&quot;#关键字&quot; class=&quot;headerlink&quot; title=&quot;关键字&quot;&gt;&lt;/a&gt;关键字&lt;/h3&gt;&lt;h5 id=&quot;25个关键字&quot;&gt;&lt;a href=&quot;#25个关键字&quot; class=&quot;headerlink&quot; title=&quot;25个关键字&quot;&gt;&lt;
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>大神 on Git</title>
    <link href="http://nudui.github.io/2016/11/17/%E5%A4%A7%E7%A5%9E-on-Git/"/>
    <id>http://nudui.github.io/2016/11/17/大神-on-Git/</id>
    <published>2016-11-17T06:02:11.000Z</published>
    <updated>2016-11-25T15:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="赵烨"><a href="#赵烨" class="headerlink" title="赵烨"></a>赵烨</h3><ul>
<li>java</li>
<li>《轻松学算法》。</li>
<li><a href="https://github.com/irfen" target="_blank" rel="external">https://github.com/irfen</a></li>
<li><a href="http://irfen.me" target="_blank" rel="external">http://irfen.me</a></li>
</ul>
<h3 id="无闻"><a href="#无闻" class="headerlink" title="无闻"></a>无闻</h3><ul>
<li>golang</li>
<li>GIT：<a href="https://github.com/Unknwon" target="_blank" rel="external">https://github.com/Unknwon</a></li>
</ul>
<h3 id="谢孟军"><a href="#谢孟军" class="headerlink" title="谢孟军"></a>谢孟军</h3><ul>
<li>《Go Web编程》、beego的作者</li>
<li><a href="https://github.com/astaxie" target="_blank" rel="external">https://github.com/astaxie</a></li>
<li><a href="http://edu.51cto.com/lecturer/index/user_id-6177767.html" target="_blank" rel="external">http://edu.51cto.com/lecturer/index/user_id-6177767.html</a></li>
</ul>
<h3 id="郝林"><a href="#郝林" class="headerlink" title="郝林"></a>郝林</h3><ul>
<li>《Go并发编程实战》作者</li>
<li><a href="https://github.com/g0hacker" target="_blank" rel="external">https://github.com/g0hacker</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;赵烨&quot;&gt;&lt;a href=&quot;#赵烨&quot; class=&quot;headerlink&quot; title=&quot;赵烨&quot;&gt;&lt;/a&gt;赵烨&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;java&lt;/li&gt;
&lt;li&gt;《轻松学算法》。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/irfe
    
    </summary>
    
      <category term="资源" scheme="http://nudui.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="资源" scheme="http://nudui.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Books on Git</title>
    <link href="http://nudui.github.io/2016/11/17/Books-on-Git/"/>
    <id>http://nudui.github.io/2016/11/17/Books-on-Git/</id>
    <published>2016-11-17T05:41:11.000Z</published>
    <updated>2016-11-18T19:39:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Go入门指南"><a href="#Go入门指南" class="headerlink" title="Go入门指南"></a>Go入门指南</h3><ul>
<li><a href="https://github.com/nudui/the-way-to-go_ZH_CN" target="_blank" rel="external">https://github.com/nudui/the-way-to-go_ZH_CN</a></li>
</ul>
<h3 id="Go-Web编程"><a href="#Go-Web编程" class="headerlink" title="Go Web编程"></a>Go Web编程</h3><ul>
<li><a href="https://github.com/astaxie/build-web-application-with-golang/tree/master/zh" target="_blank" rel="external">https://github.com/astaxie/build-web-application-with-golang/tree/master/zh</a></li>
</ul>
<h3 id="雨痕大神"><a href="#雨痕大神" class="headerlink" title="雨痕大神"></a>雨痕大神</h3><ul>
<li><a href="https://github.com/qyuhen/book" target="_blank" rel="external">https://github.com/qyuhen/book</a></li>
</ul>
<h3 id="国外资料整理"><a href="#国外资料整理" class="headerlink" title="国外资料整理"></a>国外资料整理</h3><ul>
<li><a href="https://github.com/dariubs/GoBooks#web-development" target="_blank" rel="external">https://github.com/dariubs/GoBooks#web-development</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Go入门指南&quot;&gt;&lt;a href=&quot;#Go入门指南&quot; class=&quot;headerlink&quot; title=&quot;Go入门指南&quot;&gt;&lt;/a&gt;Go入门指南&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nudui/the-way-to-go_
    
    </summary>
    
      <category term="资源" scheme="http://nudui.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="资源" scheme="http://nudui.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-2-指针</title>
    <link href="http://nudui.github.io/2016/11/17/golang%E7%AC%94%E8%AE%B0-2-%E6%8C%87%E9%92%88/"/>
    <id>http://nudui.github.io/2016/11/17/golang笔记-2-指针/</id>
    <published>2016-11-16T18:42:55.000Z</published>
    <updated>2016-11-18T02:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="指针与内存"><a href="#指针与内存" class="headerlink" title="指针与内存"></a>指针与内存</h3><p>不能将指针与内存地址混为一谈。</p>
<ul>
<li>内存地址：每个内存字节单元的唯一编号。</li>
<li>指针：专门用来保存地址的整形（整形？因为一切皆可用数字表示吗）变量。</li>
</ul>
<h6 id="如图："><a href="#如图：" class="headerlink" title="如图："></a>如图：</h6><table>
<thead>
<tr>
<th>表达式</th>
<th>p := &amp;x</th>
<th>x := 100</th>
</tr>
</thead>
<tbody>
<tr>
<td>memory</td>
<td>0x1200</td>
<td>100</td>
</tr>
<tr>
<td>address</td>
<td>0x800</td>
<td>0x1200</td>
</tr>
</tbody>
</table>
<h6 id="amp-与-："><a href="#amp-与-：" class="headerlink" title="&amp;与*："></a>&amp;与*：</h6><ul>
<li>取址运算符：&amp; ， 用于获取对象地址。</li>
<li>指针运算符：* ， 用于间接引用目标对象。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">    x := 10</div><div class="line">    p := &amp;x</div><div class="line">    fmt.Println(p)  //  0xc42000a298</div><div class="line">    fmt.Println(*p) //  10</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><ul>
<li>支持相等运算。</li>
<li>不支持加减运算、类型转换。</li>
<li>如果两个指针指向同一个地址，则二指针相等</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;指针与内存&quot;&gt;&lt;a href=&quot;#指针与内存&quot; class=&quot;headerlink&quot; title=&quot;指针与内存&quot;&gt;&lt;/a&gt;指针与内存&lt;/h3&gt;&lt;p&gt;不能将指针与内存地址混为一谈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内存地址：每个内存字节单元的唯一编号。&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
      <category term="存疑" scheme="http://nudui.github.io/tags/%E5%AD%98%E7%96%91/"/>
    
  </entry>
  
  <entry>
    <title>golang笔记-1-类型</title>
    <link href="http://nudui.github.io/2016/11/16/golang%E7%AC%94%E8%AE%B0-1-%E7%B1%BB%E5%9E%8B/"/>
    <id>http://nudui.github.io/2016/11/16/golang笔记-1-类型/</id>
    <published>2016-11-16T07:06:29.000Z</published>
    <updated>2016-11-17T11:05:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>Go语言强制了编码风格。</p>
<ul>
<li>任何需要<strong>对外暴露</strong>的名字必须以<strong>大写字母</strong>开头，不需要对外暴露的则应该以<strong>小写 字母</strong>开头。</li>
<li>Go语言明确宣告了拥护骆驼命名法而排斥下划线法。</li>
<li>“{}”，左括号禁止单开一行。<br>gotool中包含了一个代码格式化的功能。命令：go fmt hello.go，自动格式化。</li>
</ul>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul>
<li>略过</li>
</ul>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:center">取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>int8</td>
<td style="text-align:center">-128~127</td>
</tr>
<tr>
<td>int16</td>
<td style="text-align:center">-32768~32767</td>
</tr>
<tr>
<td>int32</td>
<td style="text-align:center">-2147483648~2147483647</td>
</tr>
<tr>
<td>int64</td>
<td style="text-align:center">-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td>uint…</td>
<td style="text-align:center">非负数，与上述对应 uint8:0~255</td>
</tr>
<tr>
<td>float32</td>
<td style="text-align:center">+- 1e-45 -&gt; +- 3.4 * 1e38</td>
</tr>
<tr>
<td>float64</td>
<td style="text-align:center">+- 5 <em> 1e-324 -&gt; 107 </em> 1e308</td>
</tr>
</tbody>
</table>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>特指 slice、map、channel</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>局部变量不允许只声明不使用!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//正确的声明</div><div class="line">var x int</div><div class="line">var x int = 3</div><div class="line">var x = 3</div><div class="line">var&#123;</div><div class="line">  x = 3</div><div class="line">  y = 4</div><div class="line">&#125;</div><div class="line">x := 3  //仅限于在函数中。</div><div class="line">x , y := 3 , 4</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">func x() &#123;</div><div class="line">  var x = 3</div><div class="line">  x := 3    //错误，:=用于声明 + 赋值 ，x已经声明过了，不能再次声明 ， 只能赋值。</div><div class="line">  x , y := 1 , 4    //正确 ， y为新变量，此时:=对于x降级为赋值。必须有至少一个新的变量方可。</div><div class="line">&#125;</div><div class="line">//退化赋值的前提条件：至少有一个新的变量被定义，且必须是同一作用域。</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var x = 3</div><div class="line">func x()&#123;</div><div class="line">  x := 4    //正确，此时的x与函数外的x作用域不同，相当于一个新的变量。</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="多变量"><a href="#多变量" class="headerlink" title="多变量"></a>多变量</h3><p>在进行多变量赋值时，先计算右侧的所有值，然后完成赋值操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">func main()&#123;</div><div class="line">  a , b := 1 , 2</div><div class="line">  a , b = a + 1 : b + 1</div><div class="line">  fmt.Println(a , b) //结果：2 ，3</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func exchange(a , b int) (int,int)&#123;</div><div class="line">  a , b = b , a</div><div class="line">  return a , b</div><div class="line">&#125;</div><div class="line">func main()&#123;</div><div class="line">  //只想使用b</div><div class="line">  _ , b = exchange(1 , 2)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>运行时恒定不变的，编译期间能确定值！可在函数内定义，允许只定义不使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">显式类型定义： const b string = &quot;abc&quot;</div><div class="line">隐式类型定义： const b = &quot;abc&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">正确的做法：const c1 = 2/3</div><div class="line">错误的做法：const c2 = getNumber() // 引发构建错误: getNumber() used as value</div></pre></td></tr></table></figure>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>严格来说这并非go语言的一个类型，字符只是证书的特殊用例。byte 类型是 uint8 的别名，对于只占用 1 个字节的传统 ASCII 编码的字符来说，完全没有问题。</p>
<p>例如：<code>var ch byte = &#39;A&#39;</code>字符使用单引号括起来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">判断是否为字母：unicode.IsLetter(ch)</div><div class="line">判断是否为数字：unicode.IsDigit(ch)</div><div class="line">判断是否为空白符号：unicode.IsSpace(ch)</div><div class="line">这些函数返回一个布尔值。</div></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串是UTF-8的一个序列（当字符为ASCII码时占一个字节，其他字符需要2-4个字节）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;命名&quot;&gt;&lt;a href=&quot;#命名&quot; class=&quot;headerlink&quot; title=&quot;命名&quot;&gt;&lt;/a&gt;命名&lt;/h3&gt;&lt;p&gt;Go语言强制了编码风格。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;任何需要&lt;strong&gt;对外暴露&lt;/strong&gt;的名字必须以&lt;strong&gt;大写字母&lt;
    
    </summary>
    
      <category term="golang" scheme="http://nudui.github.io/categories/golang/"/>
    
    
      <category term="golang" scheme="http://nudui.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>tomcat加载两次spring</title>
    <link href="http://nudui.github.io/2016/07/16/tomcat%E5%8A%A0%E8%BD%BD%E4%B8%A4%E6%AC%A1spring/"/>
    <id>http://nudui.github.io/2016/07/16/tomcat加载两次spring/</id>
    <published>2016-07-16T07:57:16.000Z</published>
    <updated>2016-11-17T04:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1，为了达到通过ip：端口进行访问-，做了如下配置："><a href="#1，为了达到通过ip：端口进行访问-，做了如下配置：" class="headerlink" title="1，为了达到通过ip：端口进行访问 ，做了如下配置："></a>1，为了达到通过ip：端口进行访问 ，做了如下配置：</h3><p> <img src="http://img.blog.csdn.net/20160823131643542?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h3 id="2，然而，host标签加载一次webapps里面的项目-，-context标签加载一次docbase的项目，于是造成了两次加载。"><a href="#2，然而，host标签加载一次webapps里面的项目-，-context标签加载一次docbase的项目，于是造成了两次加载。" class="headerlink" title="2，然而，host标签加载一次webapps里面的项目 ， context标签加载一次docbase的项目，于是造成了两次加载。"></a>2，然而，host标签加载一次webapps里面的项目 ， context标签加载一次docbase的项目，于是造成了两次加载。</h3><h3 id="3，解决办法：在host标签加一个-deployIgnore-”-项目名-“-，-这样，host就不会加载。"><a href="#3，解决办法：在host标签加一个-deployIgnore-”-项目名-“-，-这样，host就不会加载。" class="headerlink" title="3，解决办法：在host标签加一个 deployIgnore=”.项目名.“ ， 这样，host就不会加载。"></a>3，解决办法：在host标签加一个 deployIgnore=”.<em>项目名.</em>“ ， 这样，host就不会加载。</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1，为了达到通过ip：端口进行访问-，做了如下配置：&quot;&gt;&lt;a href=&quot;#1，为了达到通过ip：端口进行访问-，做了如下配置：&quot; class=&quot;headerlink&quot; title=&quot;1，为了达到通过ip：端口进行访问 ，做了如下配置：&quot;&gt;&lt;/a&gt;1，为了达到通过
    
    </summary>
    
      <category term="疑难杂症" scheme="http://nudui.github.io/categories/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
    
      <category term="tomcat" scheme="http://nudui.github.io/tags/tomcat/"/>
    
      <category term="spring" scheme="http://nudui.github.io/tags/spring/"/>
    
      <category term="疑难杂症" scheme="http://nudui.github.io/tags/%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87/"/>
    
  </entry>
  
  <entry>
    <title>让mysql支持表情</title>
    <link href="http://nudui.github.io/2016/06/16/%E8%AE%A9mysql%E6%94%AF%E6%8C%81%E8%A1%A8%E6%83%85/"/>
    <id>http://nudui.github.io/2016/06/16/让mysql支持表情/</id>
    <published>2016-06-16T08:00:57.000Z</published>
    <updated>2016-11-17T04:12:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改-etc-my-cnf"><a href="#修改-etc-my-cnf" class="headerlink" title="修改 /etc/my.cnf"></a>修改 /etc/my.cnf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[client] </div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysql] </div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld] </div><div class="line">character-set-client-handshake = FALSE </div><div class="line">character-set-server = utf8mb4 </div><div class="line">collation-server = utf8mb4_unicode_ci </div><div class="line">init_connect=&apos;SET NAMES utf8mb4&apos;</div></pre></td></tr></table></figure>
<h3 id="代码中"><a href="#代码中" class="headerlink" title="代码中"></a>代码中</h3><p>tomcat 6 + 、jetty 6 + 均在内部支持emoji，无须做任何代码上的修改即可</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;修改-etc-my-cnf&quot;&gt;&lt;a href=&quot;#修改-etc-my-cnf&quot; class=&quot;headerlink&quot; title=&quot;修改 /etc/my.cnf&quot;&gt;&lt;/a&gt;修改 /etc/my.cnf&lt;/h3&gt;&lt;figure class=&quot;highlight pl
    
    </summary>
    
      <category term="mysql" scheme="http://nudui.github.io/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://nudui.github.io/tags/mysql/"/>
    
      <category term="emoji" scheme="http://nudui.github.io/tags/emoji/"/>
    
  </entry>
  
  <entry>
    <title>邮箱消息嵌入到web系统</title>
    <link href="http://nudui.github.io/2015/10/10/%E9%82%AE%E7%AE%B1%E6%B6%88%E6%81%AF%E5%B5%8C%E5%85%A5%E5%88%B0web%E7%B3%BB%E7%BB%9F/"/>
    <id>http://nudui.github.io/2015/10/10/邮箱消息嵌入到web系统/</id>
    <published>2015-10-10T09:19:41.000Z</published>
    <updated>2016-11-17T04:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>用户邮箱（企业邮箱）作为web系统用户标识，监控用户邮箱新邮件，转换为系统消息。</p>
<h3 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h3><ol>
<li>其实也没啥难点，只是乍一看可能会转不过来</li>
<li>由于企业邮箱非web系统可以控制，网上亦有多人遇此需求而无方案，故而提出鄙人方案。</li>
<li>遇此需求，脑中闪现出第一方案，单独配置一个服务，每隔一段时间遍历所有用户邮箱，查看是否有新消息，如有则在消息表中生成数据，web平台根据新数据进行展示。缺点：用户数目过多时，压力过大，且邮箱中新邮件的频率不是特别大，故而没必要隔段时间遍历，且实现复杂。</li>
</ol>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><ol>
<li>部署单独服务（非必要），创建用户填写邮箱授权的页面，编写接口进行对单个用户邮箱进行查询。</li>
<li>触发此服务，web平台每隔一段时间，触发1中接口。</li>
<li>如有新邮件，则在消息表中增加数据。</li>
<li>web平台自有消息提醒。</li>
<li>关于如何通过java进行邮箱访问，请自行研究。</li>
<li>最后请大家平时注重方案的构建能力，此方案思考用时半工作日，编码测试半工作日，不要因直观不能实现就轻易说  no  I cant，甚至<strong>理直气壮</strong>的说“不能实现”。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;&lt;p&gt;用户邮箱（企业邮箱）作为web系统用户标识，监控用户邮箱新邮件，转换为系统消息。&lt;/p&gt;
&lt;h3 id=&quot;难点&quot;&gt;&lt;a href=&quot;#难点&quot;
    
    </summary>
    
      <category term="方案" scheme="http://nudui.github.io/categories/%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="mail" scheme="http://nudui.github.io/tags/mail/"/>
    
      <category term="邮箱消息" scheme="http://nudui.github.io/tags/%E9%82%AE%E7%AE%B1%E6%B6%88%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>文档在线预览方案</title>
    <link href="http://nudui.github.io/2015/10/05/%E6%96%87%E6%A1%A3%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88%E6%96%B9%E6%A1%88/"/>
    <id>http://nudui.github.io/2015/10/05/文档在线预览方案/</id>
    <published>2015-10-05T02:33:49.000Z</published>
    <updated>2016-11-17T14:01:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>如word文档在线预览，转换为html进行展示。</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><h6 id="poi"><a href="#poi" class="headerlink" title="poi"></a>poi</h6><p>不到万不得已不建议使用，很难转换完美。</p>
<h6 id="七牛"><a href="#七牛" class="headerlink" title="七牛"></a>七牛</h6><ol>
<li>七牛第三方文档转换服务，收费，但不高，api不易懂。</li>
<li>七牛自带转换服务。参考<a href="http://developer.qiniu.com/docs/v6/api/reference/fop/odconv.html。在文档url后拼接" target="_blank" rel="external">http://developer.qiniu.com/docs/v6/api/reference/fop/odconv.html。在文档url后拼接</a>  <code>?odconv/pdf</code> 。<br>缺点：此api在七牛官网无入口，可能是七牛即将弃用的服务，毕竟有了收费的第三方文档服务。</li>
</ol>
<h6 id="某些专做文档服务的服务商"><a href="#某些专做文档服务的服务商" class="headerlink" title="某些专做文档服务的服务商"></a>某些专做文档服务的服务商</h6><ul>
<li>譬如idocv，其为了销售开放了试用接口<a href="http://api.idocv.com/view/url?url=，幸甚使用此接口免费，正好符合需求。" target="_blank" rel="external">http://api.idocv.com/view/url?url=，幸甚使用此接口免费，正好符合需求。</a></li>
<li>缺点：<br>  <em>1，数据（文档）安全性。   
  </em>2，如过多调用，会引起对方警觉，可能屏蔽ip。</li>
</ul>
<h6 id="其他网上方案："><a href="#其他网上方案：" class="headerlink" title="其他网上方案："></a>其他网上方案：</h6><ul>
<li><p>activexobject，此js对象仅支持ie浏览器，且需要用户在浏览器上设置诸多选项。</p>
</li>
<li><p>百度文库。百度要求文档必须上传到文库。</p>
</li>
<li><p>其他方案已忘记，要么是系统局限，要么是操作繁琐，总之弃用。</p>
</li>
</ul>
<h6 id="根据2、3得到的html，可通过iframe进行展示。"><a href="#根据2、3得到的html，可通过iframe进行展示。" class="headerlink" title="根据2、3得到的html，可通过iframe进行展示。"></a>根据2、3得到的html，可通过iframe进行展示。</h6>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;效果&quot;&gt;&lt;a href=&quot;#效果&quot; class=&quot;headerlink&quot; title=&quot;效果&quot;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;如word文档在线预览，转换为html进行展示。&lt;/p&gt;
&lt;h3 id=&quot;方案&quot;&gt;&lt;a href=&quot;#方案&quot; class=&quot;headerli
    
    </summary>
    
      <category term="方案" scheme="http://nudui.github.io/categories/%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="word在线预览" scheme="http://nudui.github.io/tags/word%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88/"/>
    
  </entry>
  
  <entry>
    <title>人才短租模式思考</title>
    <link href="http://nudui.github.io/2015/09/24/%E4%BA%BA%E6%89%8D%E7%9F%AD%E7%A7%9F%E6%A8%A1%E5%BC%8F%E6%80%9D%E8%80%83/"/>
    <id>http://nudui.github.io/2015/09/24/人才短租模式思考/</id>
    <published>2015-09-24T07:52:28.000Z</published>
    <updated>2016-11-16T15:26:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="想法起因"><a href="#想法起因" class="headerlink" title="想法起因"></a>想法起因</h3><ul>
<li>企业通过猎头招到的人，留职时间约一年（cison说，只能保障渡过试用期）。那么企业会觉不爽，体验变差。</li>
<li>当下互联网盛行，人才思变，很难留职2年以上，一旦离职，个人信用值会降低，不离职，心中难受。</li>
</ul>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>构建人才短租模式</p>
<ol>
<li>对于企业来说，期望人才留职3年以上，但基本不可能，且猎头费依旧高昂。短租模式根据人才租约时间制定猎头费用，企业心理承受会好一些。</li>
<li>对于中高端人才来说，基本只有猎头+内推方式换工作。通过猎头跳槽，心理预期也就是工作一年，期满再跳，不必担心个人信誉负担。</li>
<li>总结起来一句话：窗户纸捅破，你究竟能接受多长时间。根据时长确定薪金与猎头服务费。</li>
</ol>
<h3 id="产品玩法"><a href="#产品玩法" class="headerlink" title="产品玩法"></a>产品玩法</h3><ul>
<li>依旧猎头模式。</li>
<li>每个猎头手里有聊过的人才（能确定接受租约时长）。</li>
<li>人才与平台签约。</li>
</ul>
<h3 id="问题与挑战"><a href="#问题与挑战" class="headerlink" title="问题与挑战"></a>问题与挑战</h3><ul>
<li>通过猎头入职人才的留职时间须调研。</li>
<li>企业与人才对此模式的认可度，或曰企业与人才对此模式的接受时长。</li>
<li>标准的建立。毕竟有越俎代庖嫌疑。</li>
</ul>
<h3 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h3><ul>
<li>弱化企业-员工的概念，就像uber要弱化汽车所有权的概念一样。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;想法起因&quot;&gt;&lt;a href=&quot;#想法起因&quot; class=&quot;headerlink&quot; title=&quot;想法起因&quot;&gt;&lt;/a&gt;想法起因&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;企业通过猎头招到的人，留职时间约一年（cison说，只能保障渡过试用期）。那么企业会觉不爽，体验变差。&lt;/li&gt;
    
    </summary>
    
      <category term="思考" scheme="http://nudui.github.io/categories/%E6%80%9D%E8%80%83/"/>
    
    
      <category term="思考" scheme="http://nudui.github.io/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>api接口规则</title>
    <link href="http://nudui.github.io/2015/05/16/api%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/"/>
    <id>http://nudui.github.io/2015/05/16/api接口规则/</id>
    <published>2015-05-16T08:07:48.000Z</published>
    <updated>2016-11-30T04:00:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="如想看如何防刷请求，请看【防刷】"><a href="#如想看如何防刷请求，请看【防刷】" class="headerlink" title="如想看如何防刷请求，请看【防刷】"></a>如想看如何防刷请求，请看【防刷】</h3><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;client&quot;:&#123;</div><div class="line">    &quot;appnm&quot; : &quot;XXX&quot;, （app name）</div><div class="line">    &quot;appVer&quot; : &quot;1.0.0&quot;,    （app版本）</div><div class="line">    &quot;clientType&quot; : &quot;ios&quot;,   （系统类型）</div><div class="line">    &quot;os&quot; : &quot;iPhone OS 10.0.3&quot;,（系统版本）</div><div class="line">    &quot;model&quot; : &quot;iPhone Simulator&quot;,（手机型号）</div><div class="line">    &quot;screen&quot; : &quot;320x568&quot;,（屏幕分辨）</div><div class="line">    &quot;channel&quot; : &quot;app_store&quot;,</div><div class="line">    &quot;deviceid&quot; : &quot;E96B0235-F60C-49F4-B2F9-F1B1041C7E51&quot;（设备号）</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&quot;auth&quot;:&#123;</div><div class="line">    &quot;auth&quot;: &quot;audbbiuf7q74asdh8fa0s9dqjashdugfasd&quot;,（用户唯一标识，如有则认为已登录）</div><div class="line">    &quot;sign&quot;: &quot;fad22321acbd122121&quot;,  （签名）</div><div class="line">    &quot;ts&quot; : &quot;1231231283213&quot;（时间戳）</div><div class="line">    &quot;rand&quot; : &quot;12121212&quot;（一个随机数）</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="url签名"><a href="#url签名" class="headerlink" title="url签名"></a>url签名</h3><p>可随意定义，别都是MD5<br><code>sign = MD5 ( url + ts + &quot;自定义一个key&quot; + rand )</code></p>
<p>服务端每次请求必须校验sign</p>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ol>
<li>移动端与服务端交互的每个请求，header必须加上client\auth中参数。</li>
<li>接口服务端返回为json类型，为方便移动端，json中数据类型全部为string。</li>
<li>如果sign不正确，服务端不处理该请求，直接返回错误码。</li>
</ol>
<h3 id="防刷："><a href="#防刷：" class="headerlink" title="防刷："></a><strong>防刷：</strong></h3><ul>
<li>校验sign，hack看到有ts，可能以为每次请求更换ts即可，实则不然，sign的算法里还有个自定义的key，如此sign很难正确。</li>
<li>如对方使用与上一次请求相同的sign，sign正确则url、ts、rand都与上一次相同。此时服务端开辟一个LRU缓存，对请求进行<strong>是否重复</strong>的判断。map.get(k)是否有值，如有，则为重复请求，返回错误码。我的k：url + ts + rand;</li>
<li><strong>短板</strong>：在访问量超大的情况下，ts必定重复（毫秒），rd也可能重复，此时只能建议用多个rand来去重，用以保障请求的唯一性。</li>
<li><strong>短板</strong>：且这个LRU缓存会越来越臃肿。所以，建议对不同的url，开辟不同的缓存。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;如想看如何防刷请求，请看【防刷】&quot;&gt;&lt;a href=&quot;#如想看如何防刷请求，请看【防刷】&quot; class=&quot;headerlink&quot; title=&quot;如想看如何防刷请求，请看【防刷】&quot;&gt;&lt;/a&gt;如想看如何防刷请求，请看【防刷】&lt;/h3&gt;&lt;h3 id=&quot;header&quot;&gt;&lt;
    
    </summary>
    
      <category term="app-api" scheme="http://nudui.github.io/categories/app-api/"/>
    
    
      <category term="app" scheme="http://nudui.github.io/tags/app/"/>
    
      <category term="api" scheme="http://nudui.github.io/tags/api/"/>
    
      <category term="接口规则" scheme="http://nudui.github.io/tags/%E6%8E%A5%E5%8F%A3%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>app会话方案</title>
    <link href="http://nudui.github.io/2015/05/16/app%E4%BC%9A%E8%AF%9D%E6%96%B9%E6%A1%88/"/>
    <id>http://nudui.github.io/2015/05/16/app会话方案/</id>
    <published>2015-05-16T08:04:45.000Z</published>
    <updated>2016-11-26T02:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="与web开发不同点"><a href="#与web开发不同点" class="headerlink" title="与web开发不同点"></a>与web开发不同点</h3><ul>
<li>web中有浏览器角色，保持用户登录状态可以根据cookie、sessionid等策略来实现。</li>
<li>而app不能（或不方便、不能自定义内容），开发者需要进行面向app的模拟session实现。</li>
</ul>
<hr>
<h3 id="借助工具"><a href="#借助工具" class="headerlink" title="借助工具"></a>借助工具</h3><ul>
<li>memcached\redis或其他进程外缓存。</li>
</ul>
<h3 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h3><ol>
<li>在db中创建auth表，须包含字段：id , userid(或mobile), auth , createtime。</li>
<li>注册时，user表中添加数据后，auth表中也添加记录，auth可自行选择加密方案。</li>
<li>登录时：<ul>
<li>1，user表中查找成功。</li>
<li>2，服务端从db中获取auth，放入缓存中。</li>
<li>3，将auth返回给移动端。</li>
</ul>
</li>
<li>移动端每次请求服务端，均须将auth信息放入header中。服务端在拦截器中校验auth（先从缓存中取，如无则取db，然后放入缓存）是否正确、定位是哪个用户。</li>
</ol>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol>
<li>web中默认未登录状态。移动端默认为登录状态（每次打开app只要有auth信息就默认为登录）。</li>
<li>在缓存中，auth要设有效时长。</li>
<li>缓存中的数据结构为  auth:userid(mobile)。</li>
<li>当下多数app将注册与登录合二为一，使用手机号+短信验证码实现注册即登录，此时实现方案应相应作出修改，在此不述。</li>
<li>web开发也可类似上述方案进行开发，不使用httpsession，原因不述。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;与web开发不同点&quot;&gt;&lt;a href=&quot;#与web开发不同点&quot; class=&quot;headerlink&quot; title=&quot;与web开发不同点&quot;&gt;&lt;/a&gt;与web开发不同点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;web中有浏览器角色，保持用户登录状态可以根据cookie、sessio
    
    </summary>
    
      <category term="app-api" scheme="http://nudui.github.io/categories/app-api/"/>
    
    
      <category term="app" scheme="http://nudui.github.io/tags/app/"/>
    
      <category term="auth" scheme="http://nudui.github.io/tags/auth/"/>
    
  </entry>
  
  <entry>
    <title>算法夕拾（09）--冒泡</title>
    <link href="http://nudui.github.io/2014/10/22/%E7%AE%97%E6%B3%95%E5%A4%95%E6%8B%BE%EF%BC%8809%EF%BC%89-%E5%86%92%E6%B3%A1/"/>
    <id>http://nudui.github.io/2014/10/22/算法夕拾（09）-冒泡/</id>
    <published>2014-10-21T19:04:30.000Z</published>
    <updated>2016-11-30T13:48:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>两两比对，调整顺序，比较n-1次</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static void sort(int[] arr) &#123;</div><div class="line">	for (int i = 1; i &lt; arr.length; i++) &#123;</div><div class="line">		for (int j = 0; j &lt; arr.length - i; j++) &#123;</div><div class="line">			if (arr[j] &lt; arr[j + 1]) &#123;</div><div class="line">				int tmp = arr[j];</div><div class="line">				arr[j] = arr[j + 1];</div><div class="line">				arr[j + 1] = tmp;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	for (int i = 0; i &lt; arr.length; i++) &#123;</div><div class="line">		System.out.println(arr[i]);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><p>时间：O(n2)</p>
<p>空间：O(1)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;p&gt;两两比对，调整顺序，比较n-1次&lt;/p&gt;
&lt;h3 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; titl
    
    </summary>
    
      <category term="算法夕拾" scheme="http://nudui.github.io/categories/%E7%AE%97%E6%B3%95%E5%A4%95%E6%8B%BE/"/>
    
    
      <category term="算法" scheme="http://nudui.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法夕拾（08）--桶排序</title>
    <link href="http://nudui.github.io/2014/10/22/%E7%AE%97%E6%B3%95%E5%A4%95%E6%8B%BE%EF%BC%8808%EF%BC%89-%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://nudui.github.io/2014/10/22/算法夕拾（08）-桶排序/</id>
    <published>2014-10-21T18:42:11.000Z</published>
    <updated>2016-11-30T13:48:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol>
<li>事先准备N个桶，每个桶代表从1到N的值。</li>
<li>将N-1个待排序数字，按照N桶的数字进行放入。</li>
<li>相同的桶放入了n次相同数字，则相应的桶的值为n。</li>
<li>遍历N个桶，只要桶中的值大于0，则输出序号，值为2，则输出两次该序号。</li>
</ol>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  桶排序</div><div class="line"> */</div><div class="line">public static void sort(int[] array, int range) &#123;</div><div class="line">    </div><div class="line">    // 桶</div><div class="line">    int[] bucket = new int[range];</div><div class="line"></div><div class="line">    // 遍历array，向bucket中表示</div><div class="line">    for (int i = 0; i &lt; array.length; i++) &#123;</div><div class="line">        int index = array[i];</div><div class="line">        bucket[index] = bucket[index] + 1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 输出</div><div class="line">    for (int i = 0; i &lt; bucket.length; i++) &#123;</div><div class="line">        for (int j = 0; j &lt; bucket[i]; j++) &#123;</div><div class="line">            System.out.println(i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>桶排序实际上只需要遍历一遍所有的元素，然后依次放入制定的位置。如果加上输出排序的时间，那么时间复杂度为O(n+m)，n：待排序的元素个数，m：桶的个数。很快，但是空间消耗比较大。</p>
<p>元素跨度越大，空间消耗越大，空间利用率越低，浪费越大。</p>
<p>但是  <strong><em>快</em></strong>  ！</p>
<h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>数据分布相对均匀，跨度不太大的场景。</p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>利用类似散列表的方式，改善空间利用率。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;事先准备N个桶，每个桶代表从1到N的值。&lt;/li&gt;
&lt;li&gt;将N-1个待排序数字，按照N桶的数字进行放入。&lt;/li&gt;
&lt;li&gt;相
    
    </summary>
    
      <category term="算法夕拾" scheme="http://nudui.github.io/categories/%E7%AE%97%E6%B3%95%E5%A4%95%E6%8B%BE/"/>
    
    
      <category term="算法" scheme="http://nudui.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
